"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[7562],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,f=d["".concat(p,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(f,i(i({ref:t},l),{},{components:n})):a.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},537:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},i="react-native-test-app-msal",s={unversionedId:"tools/react-native-test-app-msal",id:"tools/react-native-test-app-msal",title:"react-native-test-app-msal",description:"Microsoft Authentication Library (MSAL) module for",source:"@site/docs/tools/react-native-test-app-msal.md",sourceDirName:"tools",slug:"/tools/react-native-test-app-msal",permalink:"/rnx-kit/docs/tools/react-native-test-app-msal",draft:!1,editUrl:"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/tools/react-native-test-app-msal.md",tags:[],version:"current",frontMatter:{},sidebar:"toolsSidebar",previous:{title:"react-native-lazy-index",permalink:"/rnx-kit/docs/tools/react-native-lazy-index"},next:{title:"third-party-notices",permalink:"/rnx-kit/docs/tools/third-party-notices"}},p={},c=[{value:"Install",id:"install",level:2},{value:"iOS/macOS",id:"iosmacos",level:3},{value:"Usage",id:"usage",level:2},{value:"Getting a Token from Native Code",id:"getting-a-token-from-native-code",level:2},{value:"Android",id:"android",level:3},{value:"iOS/macOS",id:"iosmacos-1",level:3}],l={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"react-native-test-app-msal"},"react-native-test-app-msal"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://aka.ms/aadv2"},"Microsoft Authentication Library")," (MSAL) module for\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/microsoft/react-native-test-app#readme"},"React Native Test App"),"."),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"@rnx-kit/react-native-test-app-msal")," as a dev dependency:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"yarn add @rnx-kit/react-native-test-app-msal --dev\n")),(0,r.kt)("p",null,"or if you're using ",(0,r.kt)("inlineCode",{parentName:"p"},"npm"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm add --save-dev @rnx-kit/react-native-test-app-msal\n")),(0,r.kt)("h3",{id:"iosmacos"},"iOS/macOS"),(0,r.kt)("p",null,"We need to set the deployment target for iOS and macOS to 14.0 and 11.0 (or\nhigher) respectively, and add ",(0,r.kt)("inlineCode",{parentName:"p"},"MSAL")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Podfile"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"+platform :ios, '14.0'    # If targeting iOS, discard the line below\n+platform :macos, '11.0'  # If targeting macOS, discard the line above\n+\n require_relative '../node_modules/react-native-test-app/test_app'\n\n workspace 'MyTestApp.xcworkspace'\n\n+use_test_app! do |target|\n+  target.app do\n+    # We must use modular headers here otherwise Swift compiler will fail\n+    pod 'MSAL', :modular_headers => true\n+  end\n+end\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Add an entry for the account switcher in your ",(0,r.kt)("inlineCode",{parentName:"p"},"app.json"),", e.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},' {\n   "name": "MyTestApp",\n   "displayName": "MyTestApp",\n   "components": [\n     {\n       "appKey": "MyTestApp",\n+    },\n+    {\n+      "appKey": "com.microsoft.reacttestapp.msal.MicrosoftAccountsActivity",\n+      "displayName": "MicrosoftAccounts (Android)"\n+    },\n+    {\n+      "appKey": "MicrosoftAccounts",\n+      "displayName": "MicrosoftAccounts (iOS/macOS)"\n     }\n   ],\n   "resources": {\n     "android": ["dist/res", "dist/main.android.bundle"],\n     "ios": ["dist/assets", "dist/main.ios.jsbundle"],\n     "macos": ["dist/assets", "dist/main.macos.jsbundle"],\n     "windows": ["dist/assets", "dist/main.windows.bundle"]\n   }\n }\n')),(0,r.kt)("p",null,"Register your app with a unique bundle identifier to get your Azure Active\nDirectory client identifier and related scopes\n(",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-gb/azure/active-directory/develop/quickstart-v2-ios#register-and-download-your-quickstart-app"},"quickstart here"),"),\nthen fill out the following fields in ",(0,r.kt)("inlineCode",{parentName:"p"},"app.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},' {\n   "name": "MyTestApp",\n   "displayName": "MyTestApp",\n   "components": [\n     {\n       "appKey": "MyTestApp",\n     },\n     {\n       "appKey": "com.microsoft.reacttestapp.msal.MicrosoftAccountsActivity",\n       "displayName": "MicrosoftAccounts (Android)"\n     },\n     {\n       "appKey": "MicrosoftAccounts",\n       "displayName": "MicrosoftAccounts (iOS/macOS)"\n     }\n   ],\n+  "android": {\n+    "package": "com.contoso.MyTestApp"\n+  },\n+  "ios": {\n+    "bundleIdentifier": "com.contoso.MyTestApp"\n+  },\n+  "macos": {\n+    "bundleIdentifier": "com.contoso.MyTestApp"\n+  },\n+  "react-native-test-app-msal": {\n+    "clientId": "4b0db8c2-9f26-4417-8bde-3f0e3656f8e0",\n+    "msaScopes": ["user.read"],\n+    "orgScopes": ["user.read"],\n+    "signatureHash": "1wIqXSqBj7w+h11ZifsnqwgyKrY="\n+  },\n   "resources": {\n     "android": ["dist/res", "dist/main.android.jsbundle"],\n     "ios": ["dist/assets", "dist/main.ios.jsbundle"],\n     "macos": ["dist/assets", "dist/main.macos.jsbundle"],\n     "windows": ["dist/assets", "dist/main.windows.bundle"]\n   }\n }\n')),(0,r.kt)("h2",{id:"getting-a-token-from-native-code"},"Getting a Token from Native Code"),(0,r.kt)("p",null,"A token can be acquired from native code using the ",(0,r.kt)("inlineCode",{parentName:"p"},"TokenBroker")," singleton."),(0,r.kt)("h3",{id:"android"},"Android"),(0,r.kt)("p",null,"On Android, we will need the ",(0,r.kt)("inlineCode",{parentName:"p"},"Context")," to retrieve the singleton, and the\ncurrent ",(0,r.kt)("inlineCode",{parentName:"p"},"Activity")," to acquire a token. We need the ",(0,r.kt)("inlineCode",{parentName:"p"},"Activity")," in case we need to\nask the user to log in:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.microsoft.reacttestapp.msal.TokenBroker\n\nTokenBroker.getInstance(context).acquireToken(context.currentActivity, ...) { result, error ->\n  // handle result here\n}\n")),(0,r.kt)("h3",{id:"iosmacos-1"},"iOS/macOS"),(0,r.kt)("p",null,"On iOS/macOS, we will need the current ",(0,r.kt)("inlineCode",{parentName:"p"},"UIViewController")," (iOS) or\n",(0,r.kt)("inlineCode",{parentName:"p"},"NSViewController")," (macOS) to acquire a token in case we need to ask the user to\nlog in:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"import ReactTestApp_MSAL\n\nTokenBroker.shared.acquireToken(scopes: ..., sender: viewController) { result, error ->\n  // handle result here\n}\n")))}m.isMDXComponent=!0}}]);