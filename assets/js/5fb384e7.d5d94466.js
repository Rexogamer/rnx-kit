"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[4312],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),g=a,m=c["".concat(l,".").concat(g)]||c[g]||d[g]||i;return n?o.createElement(m,r(r({ref:t},u),{},{components:n})):o.createElement(m,r({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5271:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const i={},r="golang",s={unversionedId:"tools/golang",id:"tools/golang",title:"golang",description:"",source:"@site/docs/tools/golang.mdx",sourceDirName:"tools",slug:"/tools/golang",permalink:"/rnx-kit/docs/tools/golang",draft:!1,editUrl:"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/tools/golang.mdx",tags:[],version:"current",frontMatter:{},sidebar:"toolsSidebar",previous:{title:"eslint-plugin",permalink:"/rnx-kit/docs/tools/eslint-plugin"},next:{title:"jest-preset",permalink:"/rnx-kit/docs/tools/jest-preset"}},l={},p=[{value:"Motivation",id:"motivation",level:2},{value:"Usage",id:"usage",level:2},{value:"Pre-requisites",id:"pre-requisites",level:3},{value:"Build Tasks",id:"build-tasks",level:3},{value:"CI Loop Tasks",id:"ci-loop-tasks",level:3},{value:".gitignore",id:"gitignore",level:3},{value:"<code>clean</code> build task",id:"clean-build-task",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"golang"},"golang"),(0,a.kt)("p",null,"Integrate ",(0,a.kt)("a",{parentName:"p",href:"https://golang.org"},"Go")," into your monorepo and create native apps\nthat accelerate development and CI builds."),(0,a.kt)("h2",{id:"motivation"},"Motivation"),(0,a.kt)("p",null,"JavaScript monorepos make extensive use of NodeJs-based tools like TypeScript,\nBabel, Metro and Webpack, to name just a few. As monorepos grow in size and\ncomplexity, developers are finding that the tools don't scale well. Native\napplications like esbuild and swc are emerging to address poor toolchain\nperformance, and more are expected to appear in the coming years."),(0,a.kt)("p",null,"Developers need to optimize the tools they use to keep engineering productivity\nhigh. Turning the crank on a PR should take minutes, not hours. Converting\npieces of the toolchain to native code is required to achieve this goal."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"There are three core functions in this library. To build and use Go programs,\nyou'll need to integrate them into your task runner and CI loops."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type Logger = {\n  info: (message: string) => void;\n  warn: (message: string) => void;\n  error: (message: string) => void;\n};\n\n// Task factories for installing Go, and building/running Go programs.\nfunction goInstallTask(logger?: Logger): () => Promise<void>;\nfunction goBuildTask(logger?: Logger): () => Promise<void>;\nfunction goTask(\n  logger: Logger | undefined,\n  name: string,\n  ...args: string[]\n): () => Promise<void>;\n")),(0,a.kt)("p",null,'Go installation first looks for an existing version of Go in the system path. If\nnothing was found, a local distribution of Go is downloaded and cached in the\nmonorepo. Future "install" calls will detect the local installation, skipping\nthis entire step.'),(0,a.kt)("p",null,"The Go build task looks for Go apps under ./go/",(0,a.kt)("inlineCode",{parentName:"p"},"{project-name}"),' and stores built\nbinaries under ./bin. Each app is built using the command "go build -o\n',(0,a.kt)("inlineCode",{parentName:"p"},"{bin-path}"),"\". The Go app's binary name doesn't need to match ",(0,a.kt)("inlineCode",{parentName:"p"},"{project-name}"),"."),(0,a.kt)("p",null,"The Go execution task looks for the named binary in ./bin and executes it with\nan optional set of arguments."),(0,a.kt)("h3",{id:"pre-requisites"},"Pre-requisites"),(0,a.kt)("p",null,"Windows 10 in a minimum requirement. This package uses ",(0,a.kt)("inlineCode",{parentName:"p"},"tar")," which ships with\nthat version of Windows."),(0,a.kt)("h3",{id:"build-tasks"},"Build Tasks"),(0,a.kt)("p",null,"The three functions are task factories. They each return a function that you can\nrun as a build step in systems like ",(0,a.kt)("a",{parentName:"p",href:"https://microsoft.github.io/just"},"Just")," or\n",(0,a.kt)("a",{parentName:"p",href:"https://gulpjs.com"},"Gulp"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { task, logger } from "just-scripts";\nimport { goBuildTask, goTask } from "@rnx-kit/golang";\n\n// Make new Just tasks to install Go and build Go programs\ntask("go:install", goInstallTask(logger));\ntask("go:build", goBuildTask(logger));\ntask("go", series("go:install", "go:build"));\n\n// Tie them into the mainline build task\ntask("build", build("clean", "go", "lint", "ts"));\n\n// Add a Just task wrapper to execute the Go app named "transcode-media"\n// which reformats video files into 640x480 @ 30 fps using a well-known\n// encoding like AVC/H.264.\n//\n// This can be executed as part of other tasks, or directly on the\n// command-line: npm run just-scripts transcode-media.\n//\ntask(\n  "transcode-media",\n  goTask(logger, "transcoder", assetsDir, transcoderOutputDir)\n);\n')),(0,a.kt)("h3",{id:"ci-loop-tasks"},"CI Loop Tasks"),(0,a.kt)("p",null,"Some CI systems like ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/features/actions"},"GitHub Actions")," have\nVM images that come with Go preinstalled. To use the installed copy in GitHub\nActions, you may need to add a step like\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/actions/setup-go"},"setup-go")," to your CI pipeline definition:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'- uses: actions/setup-go@v2\n  with:\n    go-version: "^1.14.0"\n')),(0,a.kt)("p",null,"If you're using a different CI provider, find out if Go is on the build VMs. It\nwill save you time and bandwidth on each CI run."),(0,a.kt)("h3",{id:"gitignore"},".gitignore"),(0,a.kt)("p",null,"Avoid checking in Go apps, as they are platform-specific and take up a lot of\nroom. Add an entry to ",(0,a.kt)("inlineCode",{parentName:"p"},".gitignore")," to exclude the bin directory from each\npackage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"+/packages/*/bin/\n /packages/*/dist/\n /packages/*/lib/\n node_modules/\n")),(0,a.kt)("h3",{id:"clean-build-task"},(0,a.kt)("inlineCode",{parentName:"h3"},"clean")," build task"),(0,a.kt)("p",null,"It's a good idea to clean out each package's ",(0,a.kt)("inlineCode",{parentName:"p"},"bin")," directory when running a\n",(0,a.kt)("inlineCode",{parentName:"p"},"clean")," build task. This removes any stale Go apps, which will be rebuilt as\nneeded."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'import { cleanTask } from "just-scripts";\n\nexport const clean = cleanTask({\n  paths: [\n+   "bin",\n    "lib",\n  ].map((p) => path.join(process.cwd(), p)),\n});\n')))}d.isMDXComponent=!0}}]);