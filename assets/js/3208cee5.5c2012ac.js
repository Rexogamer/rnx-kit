"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[8287],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={},i="metro-config",l={unversionedId:"tools/metro-config",id:"tools/metro-config",title:"metro-config",description:"@rnx-kit/metro-config provides helper functions for creating a Metro config",source:"@site/docs/tools/metro-config.md",sourceDirName:"tools",slug:"/tools/metro-config",permalink:"/rnx-kit/docs/tools/metro-config",draft:!1,editUrl:"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/tools/metro-config.md",tags:[],version:"current",frontMatter:{},sidebar:"toolsSidebar",previous:{title:"jest-preset",permalink:"/rnx-kit/docs/tools/jest-preset"},next:{title:"metro-plugin-cyclic-dependencies-detector",permalink:"/rnx-kit/docs/tools/metro-plugin-cyclic-dependencies-detector"}},s={},c=[{value:"Usage",id:"usage",level:2},{value:"Known Limitations",id:"known-limitations",level:2},{value:"Bundle size",id:"bundle-size",level:3},{value:"Plugins",id:"plugins",level:3},{value:"Ensuring a single instance of a package",id:"ensuring-a-single-instance-of-a-package",level:3},{value:"Error: EMFILE: too many open files, watch",id:"error-emfile-too-many-open-files-watch",level:3},{value:"Error: jest-haste-map: Haste module naming collision",id:"error-jest-haste-map-haste-module-naming-collision",level:3},{value:"Flipper React DevTools is disabled",id:"flipper-react-devtools-is-disabled",level:3}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"metro-config"},"metro-config"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@rnx-kit/metro-config")," provides helper functions for creating a Metro config\nthat works in a monorepo."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"First, we need to add two files to the target package, ",(0,o.kt)("inlineCode",{parentName:"p"},"babel.config.js")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"metro.config.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// babel.config.js\nmodule.exports = {\n  presets: ["@rnx-kit/babel-preset-metro-react-native"],\n};\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// metro.config.js\nconst { makeMetroConfig } = require("@rnx-kit/metro-config");\n\nmodule.exports = makeMetroConfig({\n  transformer: {\n    getTransformOptions: async () => ({\n      transform: {\n        experimentalImportSupport: false,\n        inlineRequires: false,\n      },\n    }),\n  },\n});\n')),(0,o.kt)("p",null,"To start the dev server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn react-native start\n")),(0,o.kt)("p",null,"To build the JS bundle:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn react-native bundle    \\\n    --entry-file <path>     \\\n    --platform <platform>   \\\n    --dev <false | true>    \\\n    --bundle-output <path>  \\\n    --assets-dest <path>\n\n# e.g. to build a prod bundle\nyarn react-native bundle               \\\n    --entry-file lib/index.ios.js      \\\n    --platform ios                     \\\n    --dev false                        \\\n    --bundle-output lib/main.jsbundle  \\\n    --assets-dest lib/\n")),(0,o.kt)("p",null,"For more information on available commands and options, please see\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/react-native-community/cli/blob/v4.13.1/docs/commands.md"},"React Native CLI documentation"),"."),(0,o.kt)("h2",{id:"known-limitations"},"Known Limitations"),(0,o.kt)("p",null,"While Metro is the de-facto standard, it lacks a few features that would make it\noptimal; here's our current wishlist, feel free to submit PRs if you want to\nhelp with them :)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Implement ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/facebook/metro/issues/1"},"symlinks"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Ideally this will be done directly upstream in Metro/Watchman. In the\nmeantime, we are adding all the symlinks to ",(0,o.kt)("inlineCode",{parentName:"li"},"watchFolders")," as a workaround.")))),(0,o.kt)("h3",{id:"bundle-size"},"Bundle size"),(0,o.kt)("p",null,"Metro currently does not implement tree shaking, i.e. it does not attempt to\nremove unused code from the JS bundle. For instance, given this code snippet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { partition } from "lodash";\n')),(0,o.kt)("p",null,"Metro will bundle all of ",(0,o.kt)("inlineCode",{parentName:"p"},"lodash")," in your bundle even though you're only using a\nsmall part of it. In ",(0,o.kt)("inlineCode",{parentName:"p"},"lodash"),"'s case, you can add\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/lodash/babel-plugin-lodash#readme"},(0,o.kt)("inlineCode",{parentName:"a"},"babel-plugin-lodash"))," to\nyour Babel config to help Metro strip away some modules, but not all libraries\nwill come with such helpers."),(0,o.kt)("p",null,"If you're feeling adventurous, you can try an experimental Metro serializer\nwe've built that adds support for tree shaking:\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rnx-kit/tree/main/packages/metro-serializer-esbuild#readme"},"@rnx-kit/metro-serializer-esbuild"),".\nDo note that you will need to be on React Native 0.64 or above, and use Metro\n0.66.1."),(0,o.kt)("h3",{id:"plugins"},"Plugins"),(0,o.kt)("p",null,"Metro doesn't have a plugin system, but it does have hooks that allows you to\nimplement something that functions similarly.\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rnx-kit/tree/main/packages/metro-serializer#readme"},"@rnx-kit/metro-serializer"),"\nimplements a serializer that allows you to pass plugins that are run just before\nthe JS bundle is serialized and written to disk. Follow the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rnx-kit/tree/main/packages/metro-serializer#usage"},"instructions for installing it"),",\nthen try our plugins:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/microsoft/rnx-kit/tree/main/packages/metro-plugin-cyclic-dependencies-detector"},"@rnx-kit/metro-plugin-cyclic-dependencies-detector"),"\nis a plugin that detects cyclic imports. These can cause bugs that can be\nreally confusing to debug."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/microsoft/rnx-kit/tree/main/packages/metro-plugin-duplicates-checker"},"@rnx-kit/metro-plugin-duplicates-checker"),"\ndetects whether you're bundling multiple copies of the same package in your JS\nbundle."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/microsoft/rnx-kit/tree/main/packages/metro-plugin-typescript-validation"},"@rnx-kit/metro-plugin-typescript-validation"),"\nperforms type checking of the TypeScript files being bundled. The Babel plugin\nfor TypeScript that comes with ",(0,o.kt)("inlineCode",{parentName:"li"},"metro-react-native-babel-preset")," only strips\nthe types. Normally, one would run ",(0,o.kt)("inlineCode",{parentName:"li"},"tsc")," separately to ensure that the code is\ncorrect. This step can now be replaced with the plugin.")),(0,o.kt)("p",null,"You can of course also provide your own plugins."),(0,o.kt)("h3",{id:"ensuring-a-single-instance-of-a-package"},"Ensuring a single instance of a package"),(0,o.kt)("p",null,"Normally, Metro resolves a module relative to the package it is currently\nresiding in. For example, with a monorepo such as below, ",(0,o.kt)("inlineCode",{parentName:"p"},"my-awesome-package"),"\nwould resolve ",(0,o.kt)("inlineCode",{parentName:"p"},"react-native-msal@2.0.3")," while ",(0,o.kt)("inlineCode",{parentName:"p"},"another-awesome-package")," would\nresolve ",(0,o.kt)("inlineCode",{parentName:"p"},"react-native-msal@3.1.0"),". This would lead to duplicate packages in your\nbundle and may cause issues."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"workspace\n\u251c\u2500\u2500 node_modules\n\u2502   \u2514\u2500\u2500 react-native-msal@3.1.0  <-- should be ignored\n\u2514\u2500\u2500 packages\n    \u251c\u2500\u2500 my-awesome-package\n    \u2502   \u2514\u2500\u2500 node_modules\n    \u2502       \u2514\u2500\u2500 react-native-msal@2.0.3  <-- should take precedence\n    \u2514\u2500\u2500 another-awesome-package  <-- imported by my-awesome-package,\n                                     but uses workspace's react-native-msal\n")),(0,o.kt)("p",null,"If we simply exclude the workspace's copy, Metro will not be able to find\n",(0,o.kt)("inlineCode",{parentName:"p"},"react-native-msal")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"another-awesome-package"),". It also won't exclude copies\nthat are installed in other packages. To help Metro resolve to the correct copy,\nwe need to exclude all other copies, and also add a corresponding entry in\n",(0,o.kt)("inlineCode",{parentName:"p"},"extraNodeModules"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"@rnx-kit/metro-config")," contains functions to help you set\nthis up correctly. Given the example above, our ",(0,o.kt)("inlineCode",{parentName:"p"},"metro.config.js")," should look\nlike this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const {\n  exclusionList,\n  makeMetroConfig,\n  resolveUniqueModule,\n} = require("@rnx-kit/metro-config");\n\nconst [msalPath, msalExcludePattern] = resolveUniqueModule("react-native-msal");\nconst additionalExclusions = [msalExcludePattern];\nconst blockList = exclusionList(additionalExclusions);\n\nmodule.exports = makeMetroConfig({\n  resolver: {\n    extraNodeModules: {\n      "react-native-msal": msalPath,\n    },\n    blacklistRE: blockList, // For Metro < 0.60\n    blockList, // For Metro >= 0.60\n  },\n});\n')),(0,o.kt)("h3",{id:"error-emfile-too-many-open-files-watch"},"Error: EMFILE: too many open files, watch"),(0,o.kt)("p",null,"If you're getting an error like below, you need to\n",(0,o.kt)("a",{parentName:"p",href:"https://facebook.github.io/watchman/docs/install.html"},"install Watchman"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"events.js:292\n      throw er; // Unhandled 'error' event\n      ^\n\nError: EMFILE: too many open files, watch\n    at FSEvent.FSWatcher._handle.onchange (internal/fs/watchers.js:178:28)\nEmitted 'error' event on NodeWatcher instance at:\n    at NodeWatcher.checkedEmitError (/~/node_modules/sane/src/node_watcher.js:143:12)\n    at FSWatcher.emit (events.js:315:20)\n    at FSEvent.FSWatcher._handle.onchange (internal/fs/watchers.js:184:12) {\n  errno: -24,\n  syscall: 'watch',\n  code: 'EMFILE',\n  filename: null\n}\n")),(0,o.kt)("h3",{id:"error-jest-haste-map-haste-module-naming-collision"},"Error: jest-haste-map: Haste module naming collision"),(0,o.kt)("p",null,"Metro will throw an exception if it finds duplicates:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Error: jest-haste-map: Haste module naming collision:\n  Duplicate module name: react-animated\n  Paths: /~/node_modules/example/node_modules/react-native/Libraries/Animated/release/package.json collides with /~/node_modules/react-native/Libraries/Animated/release/package.json\n\nThis error is caused by `hasteImpl` returning the same name for different files.\n    at setModule (/~/node_modules/jest-haste-map/build/index.js:569:17)\n    at workerReply (/~/node_modules/jest-haste-map/build/index.js:641:9)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n    at async Promise.all (index 77)\n")),(0,o.kt)("p",null,"To resolve this, you'll need to exclude one of the paths in your\n",(0,o.kt)("inlineCode",{parentName:"p"},"metro.config.js"),", e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const { exclusionList, makeMetroConfig } = require("@rnx-kit/metro-config");\n\nconst blockList = exclusionList([\n  // Ignore nested copies of react-native\n  /node_modules\\/.*\\/node_modules\\/react-native\\/.*/,\n]);\n\nmodule.exports = makeMetroConfig({\n  resolver: {\n    blacklistRE: blockList, // For Metro < 0.60\n    blockList, // For Metro >= 0.60\n  },\n});\n')),(0,o.kt)("h3",{id:"flipper-react-devtools-is-disabled"},"[Flipper]"," React DevTools is disabled"),(0,o.kt)("p",null,'Flipper only enables React Native plugins if it detects a Metro "device". It\ndetects one by opening ',(0,o.kt)("inlineCode",{parentName:"p"},"localhost:8081"),' and checking for some keywords like\n"React Native packager is running". However, if one of your packages have an\n',(0,o.kt)("inlineCode",{parentName:"p"},"index.html")," in the package root, Metro will serve that file instead. Flipper\nwill then think that it's not dealing with a React Native app and disable all\nrelated plugins."),(0,o.kt)("p",null,"The fix is to move ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html")," elsewhere, but if you cannot do that, you can\nwork around this issue by filtering out the offending packages in\n",(0,o.kt)("inlineCode",{parentName:"p"},"metro.config.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const { makeMetroConfig } = require("@rnx-kit/metro-config");\nconst fs = require("fs");\nconst path = require("path");\n\nconst config = makeMetroConfig();\n\nmodule.exports = {\n  ...config,\n  watchFolders: config.watchFolders.filter(\n    (p) => !fs.existsSync(path.join(p, "index.html"))\n  ),\n};\n')))}m.isMDXComponent=!0}}]);