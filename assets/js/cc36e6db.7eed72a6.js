"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[4281],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),k=i,h=d["".concat(p,".").concat(k)]||d[k]||m[k]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=k;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},8563:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={},o="Dependency Management",l={unversionedId:"architecture/dependency-management",id:"architecture/dependency-management",title:"Dependency Management",description:"dep-check was recently renamed to align-deps to avoid name clashes and",source:"@site/docs/architecture/dependency-management.md",sourceDirName:"architecture",slug:"/architecture/dependency-management",permalink:"/rnx-kit/docs/architecture/dependency-management",draft:!1,editUrl:"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/architecture/dependency-management.md",tags:[],version:"current",frontMatter:{},sidebar:"architectureSidebar",previous:{title:"Architecture Overview",permalink:"/rnx-kit/docs/architecture/overview"}},p={},s=[{value:"Terminology",id:"terminology",level:2},{value:"Motivation",id:"motivation",level:2},{value:"1. Which packages should I use?",id:"1-which-packages-should-i-use",level:3},{value:"2. How do I align all of my code on the same set of packages and versions?",id:"2-how-do-i-align-all-of-my-code-on-the-same-set-of-packages-and-versions",level:3},{value:"3. How do I align all apps on the same set of packages and versions?",id:"3-how-do-i-align-all-apps-on-the-same-set-of-packages-and-versions",level:3},{value:"Design",id:"design",level:2},{value:"Capabilities",id:"capabilities",level:3},{value:"Profiles",id:"profiles",level:3},{value:"Putting it all together",id:"putting-it-all-together",level:3},{value:"Zero-config",id:"zero-config",level:3},{value:"Extensions",id:"extensions",level:3},{value:"Alternatives",id:"alternatives",level:2}],c={toc:s},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dependency-management"},"Dependency Management"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," was recently renamed to ",(0,i.kt)("inlineCode",{parentName:"p"},"align-deps")," to avoid name clashes and\ngeneral confusion. Unless noted otherwise, this document is still valid."),(0,i.kt)("p",{parentName:"admonition"},"You can read more about the changes in this RFC:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rnx-kit/blob/rfcs/text/0001-dep-check-v2.md"},"https://github.com/microsoft/rnx-kit/blob/rfcs/text/0001-dep-check-v2.md"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../tools/align-deps"},"dep-check")," is a dependency manager and linter that aims to\nbring alignment to all React Native developers who are working in any-size\nrepositories, from small self-contained repositories to big, enterprise\nmonorepos."),(0,i.kt)("h2",{id:"terminology"},"Terminology"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"experience")," \u2014 As opposed to apps that get shipped in e.g. App Store or Play\nStore, experiences may be a single screen (or multiple) integrated into an\napp. They are normally not shipped as standalone apps."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"monorepo")," \u2014 A single repository in which many projects live. These can\nrange from single-purpose libraries to experiences or full-fledged apps. For\ninstance, ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/microsoft/rnx-kit"},"https://github.com/microsoft/rnx-kit")," is a monorepo containing many\nuseful tools, including ",(0,i.kt)("inlineCode",{parentName:"li"},"dep-check"),".")),(0,i.kt)("h2",{id:"motivation"},"Motivation"),(0,i.kt)("p",null,"The design of ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," is driven mainly by the following questions:"),(0,i.kt)("h3",{id:"1-which-packages-should-i-use"},"1. Which packages should I use?"),(0,i.kt)("p",null,"There is currently no centralized place where developers can go to and get a\nlist of recommended modules, and which versions they should be using when\ntargeting a specific version of React Native. How do you know whether a module\nis still maintained? Are the maintainers still around to review PRs? Is the\nmodule being used by others?"),(0,i.kt)("p",null,"Take ",(0,i.kt)("inlineCode",{parentName:"p"},"AsyncStorage")," as an example. This is a module that used to ship with React\nNative. It then got moved out to the React Native Community organization as\n",(0,i.kt)("inlineCode",{parentName:"p"},"@react-native-community/async-storage")," as part of the Lean Core effort. It\nlater got ejected from React Native Community, and was renamed\n",(0,i.kt)("inlineCode",{parentName:"p"},"@react-native-async-storage/async-storage"),". If you don't know the full story of\nwhat happened here, there is little chance you know that ",(0,i.kt)("inlineCode",{parentName:"p"},"AsyncStorage")," from\ncore, ",(0,i.kt)("inlineCode",{parentName:"p"},"@react-native-community/async-storage"),", and\n",(0,i.kt)("inlineCode",{parentName:"p"},"@react-native-async-storage/async-storage")," are all the same module. Or that\n",(0,i.kt)("inlineCode",{parentName:"p"},"@react-native-community/netinfo")," was a fork of ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-netinfo"),' that\nlater became the "official" one.'),(0,i.kt)("h3",{id:"2-how-do-i-align-all-of-my-code-on-the-same-set-of-packages-and-versions"},"2. How do I align all of my code on the same set of packages and versions?"),(0,i.kt)("p",null,"Ideally, all apps are always on the latest version of ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native")," and are\nusing a common set of well maintained community modules. Unfortunately, the\nreality is that some apps are on a two year old version of ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native")," and\nsome modules that are no longer maintained, while others are on a somewhat\nrecent version of ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native")," but on an older version of WebView than what\nothers use. When you're responsible for an experience that goes into many apps,\nyou may be forced to provide support for both scenarios (and others), and that's\nwhere most feel the pain. How can you make sure that your experiences'\ndependencies play well with each other or even other experiences? The pain is\nmagnified in a monorepo with many developers as breakages can come from a single\npackage being out of sync with the others. Breakages caused by such packages are\nhard to debug and pinpoint the cause. In a monorepo, it is very important to\nensure that all packages are on the same versions."),(0,i.kt)("h3",{id:"3-how-do-i-align-all-apps-on-the-same-set-of-packages-and-versions"},"3. How do I align all apps on the same set of packages and versions?"),(0,i.kt)("p",null,"When integrating multiple experiences into an existing app, it can sometimes be\ndifficult to determine the dependencies that need to be installed. For example,\ngiven two experiences with dependencies as below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "experience-A",\n  "version": "1.0.0",\n  "peerDependencies": {\n    "react-native": "^0.63 || ^0.64",\n    "react-native-netinfo": "^5.7.1 || ^6.0.0"\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "experience-B",\n  "version": "1.0.0",\n  "peerDependencies": {\n    "react-native": "^0.63",\n    "react-native-netinfo": "^5.7.1 || ^6.0.0"\n  }\n}\n')),(0,i.kt)("p",null,"In this example, it's not so hard to see that the integrating app should be\nusing ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native")," 0.63 and ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-netinfo")," 6.0.0. However, imagine\nthat there are multiple experiences and many more dependencies. It's not hard to\nsee that it can quickly become very messy to go through all of them and make\nsure that the app's ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," satisfies all of them, and without causing\nany conflicts. And you'll have to do this every time one or more packages get\nupdated. Not all experiences will be declaring their dependencies correctly,\ne.g. putting ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-netinfo")," under ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies")," and causing multiple\nversions of ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-netinfo")," to be bundled. When it is time to update\nReact Native to the latest version, can you do that and still be confident that\nall your modules will still work?"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@rnx-kit/dep-check")," works by reading a configuration, and suggests changes that\nneed to be made. It can optionally also write said changes to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),". The configuration must be manually written by the package owner.\nIt declares which React Native versions the package supports, and which\ncapabilities it requires. For instance, lets say we have a library,\n",(0,i.kt)("inlineCode",{parentName:"p"},"awesome-library"),", which supports React Native versions 0.63 and 0.64, and needs\nsomething that provides network information. We would declare the following in\nour ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "name": "awesome-library",\n  "version": "1.0.0",\n  ...\n  "rnx-kit": {\n    "reactNativeVersion": "^0.63 || ^0.64",\n    "capabilities": [\n      "core-android",\n      "core-ios",\n      "netinfo"\n    ]\n  }\n}\n')),(0,i.kt)("p",null,"If we run ",(0,i.kt)("inlineCode",{parentName:"p"},"@rnx-kit/dep-check")," now, it will suggest that we change\n",(0,i.kt)("inlineCode",{parentName:"p"},"peerDependencies")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"devDependencies")," to the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "name": "awesome-library",\n  "version": "1.0.0",\n  ...\n  "peerDependencies": {\n    "@react-native-community/netinfo": "^5.7.1 || ^6.0.0",\n    "react-native": "^0.63.2 || ^0.64.1"\n  },\n  "devDependencies": {\n    "@react-native-community/netinfo": "^5.7.1",\n    "react-native": "^0.63.2"\n  },\n  "rnx-kit": {\n    "reactNativeVersion": "^0.63 || ^0.64",\n    "capabilities": [\n      "core-android",\n      "core-ios",\n      "netinfo"\n    ]\n  }\n}\n')),(0,i.kt)("p",null,"Now our ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," correctly declares that it supports React Native 0.63 and\n0.64 to consumers. It also added ",(0,i.kt)("inlineCode",{parentName:"p"},"@react-native-community/netinfo"),", a package\nthat provides network information. At the same time, it also sets the versions\nwe'll need during development."),(0,i.kt)("p",null,"For apps that use ",(0,i.kt)("inlineCode",{parentName:"p"},"@rnx-kit/dep-check"),", the process is similar but you'll also\nneed to declare that the package is an app by adding ",(0,i.kt)("inlineCode",{parentName:"p"},'"kitType": "app"'),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "name": "awesome-app",\n  "version": "1.0.0",\n  ...\n  "dependencies": {\n    "@react-native-community/netinfo": "^6.0.0",\n    "awesome-library": "1.0.0",\n    "react-native": "^0.64.1"\n  },\n  "rnx-kit": {\n    "reactNativeVersion": "^0.64",\n    "kitType": "app",\n    "capabilities": [\n      "core-android",\n      "core-ios"\n    ]\n  }\n}\n')),(0,i.kt)("p",null,"Now, we see that ",(0,i.kt)("inlineCode",{parentName:"p"},"@rnx-kit/dep-check")," added ",(0,i.kt)("inlineCode",{parentName:"p"},"@react-native-community/netinfo"),"\neven though it wasn't declared in capabilities. This is because when a package\nis an app, it needs to fulfill the requirements of its dependencies. In this\nexample, because ",(0,i.kt)("inlineCode",{parentName:"p"},"awesome-library")," needs the ",(0,i.kt)("inlineCode",{parentName:"p"},"netinfo")," capability, it gets added\nto ",(0,i.kt)("inlineCode",{parentName:"p"},"awesome-app"),"."),(0,i.kt)("h2",{id:"design"},"Design"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," attempts to solve these issues by aligning users on a centralized\nrepository of dependencies. Initially, the repository will be seeded with\npopular packages, but the goal for it is to become crowd-sourced so that we all\ncan benefit from the latest fixes and features without all having to be\nup-to-date on everything that goes within the React Native community."),(0,i.kt)("h3",{id:"capabilities"},"Capabilities"),(0,i.kt)("p",null,"Modules usually provide one or more features. For instance,\n",(0,i.kt)("inlineCode",{parentName:"p"},"@react-native-async-storage/async-storage")," provides a simple key-value storage,\n",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-webview")," provides a web view component, and so on. Knowing which\nmodules are providing the desired features can be tricky. With ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check"),", we\npropose the use of generic names, or capabilities as we call them, that map\ndirectly to a package:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Capability"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Package"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"netinfo"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Device network information"),(0,i.kt)("td",{parentName:"tr",align:"left"},"@react-native-community/netinfo")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"storage"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Key-value storage"),(0,i.kt)("td",{parentName:"tr",align:"left"},"@react-native-async-storage/async-storage")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"webview"),(0,i.kt)("td",{parentName:"tr",align:"left"},"WebView component"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native-webview")))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," also defines a set of ",(0,i.kt)("strong",{parentName:"p"},"core")," capabilities. These are capabilities\nthat provide platform support, and are currently defined in the below table:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Capability"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Platform"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Package"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"core-android"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Android"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"core-ios"),(0,i.kt)("td",{parentName:"tr",align:"left"},"iOS"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"core-macos"),(0,i.kt)("td",{parentName:"tr",align:"left"},"macOS"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native-macos")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"core-windows"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Windows"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native-windows")))),(0,i.kt)("p",null,"With generic names, we are more resilient against module renames since we can\nrecommend the old name in one version, and the new name in the next. We could\neven provide a fork with security fixes or backwards compatibility shims for\nlong term support. We will see how this can be achieved with profiles in the\nnext section."),(0,i.kt)("h3",{id:"profiles"},"Profiles"),(0,i.kt)("p",null,"We cannot force everyone to be on the latest version of ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native"),".\nSometimes it's not desirable, e.g. due to bugs, or feasible due to constraints\nor lack of expertise. What we can do, however, is to try lessen the pain of\nsupporting multiple versions of ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native")," and community modules. To that\nend, ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," introduces the concept of profiles. A profile is a single set\nof all capability to package@version mappings, usually tied to a single version\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native"),". For instance, the following table is a partial profile for\n",(0,i.kt)("inlineCode",{parentName:"p"},"react-native")," 0.63\n(",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rnx-kit/blob/769e9fa290929effd5111884f1637c21326b5a95/packages/dep-check/src/profiles/profile-0.63.ts#L9"},"full listing here"),"):"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Capability"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Package"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"core-android"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native@^0.63.2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"core-ios"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native@^0.63.2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"core-macos"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native-macos@^0.63.0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"core-windows"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native-windows@^0.63.0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"netinfo"),(0,i.kt)("td",{parentName:"tr",align:"left"},"@react-native-community/netinfo@^5.7.1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"react"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"mailto:react@16.13.1"},"react@16.13.1"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"storage"),(0,i.kt)("td",{parentName:"tr",align:"left"},"@react-native-community/async-storage@^1.12.1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"webview"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native-webview@^11.4.2")))),(0,i.kt)("p",null,"Here's the partial profile for react-native 0.64\n(",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rnx-kit/blob/769e9fa290929effd5111884f1637c21326b5a95/packages/dep-check/src/profiles/profile-0.64.ts#L8"},"full listing here"),"):"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Capability"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Package"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"core-android"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native@^0.64.2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"core-ios"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native@^0.64.2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"core-macos"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native-macos@^0.64.0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"core-windows"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native-windows@^0.64.0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"netinfo"),(0,i.kt)("td",{parentName:"tr",align:"left"},"@react-native-community/netinfo@^6.0.0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"react"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"mailto:react@17.0.1"},"react@17.0.1"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"storage"),(0,i.kt)("td",{parentName:"tr",align:"left"},"@react-native-async-storage/async-storage@^1.15.3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"webview"),(0,i.kt)("td",{parentName:"tr",align:"left"},"react-native-webview@^11.4.2")))),(0,i.kt)("p",null,"A package declares what capabilities it requires, which versions of\n",(0,i.kt)("inlineCode",{parentName:"p"},"react-native")," it supports, and ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," will populate the package's\n",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," with the modules and versions that it should use. For instance,\nif a package that supports ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native")," 0.63 requires ",(0,i.kt)("inlineCode",{parentName:"p"},"core-ios"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"netinfo"),",\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"react"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," will add ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native@^0.63.2"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"@react-native-community/netinfo@^5.7.1"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"react@16.13.1"),"."),(0,i.kt)("p",null,"When the package is migrated from one profile version to the next, the author\nshould be prompted to bump a few packages. For instance, besides bumping\n",(0,i.kt)("inlineCode",{parentName:"p"},"react-native"),", they also should bump ",(0,i.kt)("inlineCode",{parentName:"p"},"react")," to 17.0.1, and\n",(0,i.kt)("inlineCode",{parentName:"p"},"@react-native-community/netinfo")," to ^6.0.0. We also note that\n",(0,i.kt)("inlineCode",{parentName:"p"},"@react-native-community/async-storage")," was renamed to\n",(0,i.kt)("inlineCode",{parentName:"p"},"@react-native-async-storage/async-storage"),". While users are on older profiles,\nthey should be warned of upcoming, potentially breaking changes so they can be\nprepared."),(0,i.kt)("p",null,"Besides package renames, we can also recommend alternative modules that provide\nthe same capability, or forks that include security fixes or shims for backwards\ncompatibility where long term support is a concern."),(0,i.kt)("h3",{id:"putting-it-all-together"},"Putting it all together"),(0,i.kt)("p",null,"Now that we know the basic concepts, let's take a look at how it works. We'll\nstart with configuring the examples from earlier. ",(0,i.kt)("inlineCode",{parentName:"p"},"experience-A")," depends on\n",(0,i.kt)("inlineCode",{parentName:"p"},"react-native")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-netinfo"),". According to our list of\ncapabilities, they correspond to ",(0,i.kt)("inlineCode",{parentName:"p"},"core-android"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"core-ios")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"netinfo"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},' {\n   "name": "experience-A",\n   "version": "1.0.0",\n   "peerDependencies": {\n     "react-native": "^0.63 || ^0.64",\n     "react-native-netinfo": "^5.7.1 || ^6.0.0"\n   },\n+  "rnx-kit": {\n+    "reactNativeVersion": "^0.63 || ^0.64",\n+    "capabilities": ["core-android", "core-ios", "netinfo"]\n+  }\n }\n')),(0,i.kt)("p",null,"Likewise for ",(0,i.kt)("inlineCode",{parentName:"p"},"experience-B"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},' {\n   "name": "experience-B",\n   "version": "1.0.0",\n   "peerDependencies": {\n     "react-native": "^0.63",\n     "react-native-netinfo": "^5.7.1 || ^6.0.0"\n   },\n+  "rnx-kit": {\n+    "reactNativeVersion": "^0.63",\n+    "capabilities": ["core-android", "core-ios", "netinfo"]\n+  }\n }\n')),(0,i.kt)("p",null,"If we run ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," now, it will complain because ",(0,i.kt)("inlineCode",{parentName:"p"},"experience-B")," only needs to\nsupport ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-netinfo"),"@^5.7.1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},' {\n   "name": "experience-B",\n   "version": "1.0.0",\n   "peerDependencies": {\n     "react-native": "^0.63",\n-    "react-native-netinfo": "^5.7.1 || ^6.0.0"\n+    "react-native-netinfo": "^5.7.1"\n   },\n   "rnx-kit": {\n     "reactNativeVersion": "^0.63",\n     "capabilities": ["core-android", "core-ios", "netinfo"]\n   }\n }\n')),(0,i.kt)("p",null,"We try to avoid breaking changes (major version bumps) within a single profile\nversion. That's why ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," will recommend 5.x only for ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native")," 0.63."),(0,i.kt)("p",null,"If we add ",(0,i.kt)("inlineCode",{parentName:"p"},"webview")," to capabilities now, ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," will ask you to add\n",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-webview"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},' {\n   "name": "experience-B",\n   "version": "1.0.0",\n   "peerDependencies": {\n     "react-native": "^0.63",\n     "react-native-netinfo": "^5.7.1",\n+    "react-native-webview": "^11.4.2"\n   },\n   "rnx-kit": {\n     "reactNativeVersion": "^0.63",\n     "capabilities": ["core-android", "core-ios", "netinfo", "webview"]\n   }\n }\n')),(0,i.kt)("p",null,"The user need not know what package to use, only the desired feature."),(0,i.kt)("p",null,"Let's move on to configuring our app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},' {\n   "name": "app",\n   "version": "1.0.0",\n   "dependencies": {\n     "experience-A": "^1.0.0",\n     "experience-B": "^1.0.0",\n     "react-native": "^0.63.2"\n   },\n+  "rnx-kit": {\n+    "reactNativeVersion": "^0.63",\n+    "kitType": "app",\n+    "capabilities": ["core-android", "core-ios"]\n+  }\n }\n')),(0,i.kt)("p",null,"The first thing you should note here is that we need to declare that this is an\napp by setting ",(0,i.kt)("inlineCode",{parentName:"p"},'"kitType": "app"'),". This will tell ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," to also scan\ndependencies. By default, this is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"library"),"."),(0,i.kt)("p",null,"Running ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," now, the first thing it does is to scan through all your\ndependencies and gather all required capabilities. ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," will then resolve\nall capabilities, and finally make sure the ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies")," section in\n",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," contains all the needed packages and at the correct versions. In\nour example, our list of capabilities will contain ",(0,i.kt)("inlineCode",{parentName:"p"},'["netinfo", "webview"]'),".\n",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," sees that there are missing dependencies in your ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," and\nwill output an error message telling you to add them:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},' {\n   "name": "app",\n   "version": "1.0.0",\n   "dependencies": {\n     "experience-A": "^1.0.0",\n     "experience-B": "^1.0.0",\n     "react-native": "^0.63.2",\n+    "react-native-netinfo": "^5.7.1",\n+    "react-native-webview": "^11.4.2"\n   },\n   "rnx-kit": {\n     "reactNativeVersion": "^0.63",\n     "capabilities": ["core-android", "core-ios"]\n   }\n }\n')),(0,i.kt)("p",null,"Re-running the command with ",(0,i.kt)("inlineCode",{parentName:"p"},"--write")," will let ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," add them for you."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," makes sure that your declared dependencies always matches your list\nof capabilities. It will make sure that your dependencies are declare in the\nright sections, i.e. under ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies")," if you're an app, and under\n",(0,i.kt)("inlineCode",{parentName:"p"},"peerDependencies")," if you're a library. It will also report partial ones,\nmeaning it will catch scenarios such as when you declare support for 0.63 and\n0.64, but are missing ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-netinfo"),"@^6.0.0."),(0,i.kt)("h3",{id:"zero-config"},"Zero-config"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," is currently opt-in. Packages need to have a configuration that\n",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," can run against. However, there is still a need to align packages\nacross repositories without having to configure all packages. ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check")," should\nstill be useful without a configuration."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--init")," \u2014 When configuring a package, it can be cumbersome to know what\npackages map to what capabilities. ",(0,i.kt)("inlineCode",{parentName:"li"},"--init")," is a best-effort command that\nscans all your dependencies and adds a configuration with all the capabilities\nit thinks are required. You'll likely have to clean up the list, but at least\nyou won't have to start from scratch."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--vigilant")," \u2014 Without configuring any packages, you can still benefit from\n",(0,i.kt)("inlineCode",{parentName:"li"},"dep-check")," with ",(0,i.kt)("inlineCode",{parentName:"li"},"--vigilant"),". This mode will scan all dependencies and make\nsure that their dependencies align with the specified profiles. For instance,\n",(0,i.kt)("inlineCode",{parentName:"li"},"--vigilant 0.63,0.64")," will compare dependencies against all known modules in\nprofile version 0.63 and 0.64.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In ",(0,i.kt)("inlineCode",{parentName:"p"},"align-deps"),", we've changed the configuration schema to make it more generic\nand not tied to a specific dependency (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native"),"). The ",(0,i.kt)("inlineCode",{parentName:"p"},"--vigilant"),"\nflag had to be replaced as well. The equivalent of ",(0,i.kt)("inlineCode",{parentName:"p"},"--vigilant 0.63,0.64")," in the\nnew schema is ",(0,i.kt)("inlineCode",{parentName:"p"},"--requirements 'react-native@0.63 || 0.64'"),"."),(0,i.kt)("p",{parentName:"admonition"},"You can read more about the changes in this RFC:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rnx-kit/blob/rfcs/text/0001-dep-check-v2.md"},"https://github.com/microsoft/rnx-kit/blob/rfcs/text/0001-dep-check-v2.md"))),(0,i.kt)("h3",{id:"extensions"},"Extensions"),(0,i.kt)("p",null,"The list of capabilities may be limited for some usage scenarios. ",(0,i.kt)("inlineCode",{parentName:"p"},"dep-check"),"\ntherefore also allows users to specify additional profiles via configuration,\n",(0,i.kt)("inlineCode",{parentName:"p"},"customProfiles"),", or the equivalent flag, ",(0,i.kt)("inlineCode",{parentName:"p"},"--custom-profiles"),". The value can be\na path to a ",(0,i.kt)("inlineCode",{parentName:"p"},".js"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".json"),", or module name, e.g.\n",(0,i.kt)("inlineCode",{parentName:"p"},"my-custom-capability-resolver"),", and must default export an object containing\nprofiles keyed by its version number. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'module.exports = {\n  "0.63": {\n    "my-capability": {\n      name: "my-module",\n      version: "1.0.0",\n    },\n  },\n  "0.64": {\n    "my-capability": {\n      name: "my-module",\n      version: "1.1.0",\n    },\n  },\n};\n')),(0,i.kt)("p",null,"The profiles are appended to the default ones and may override capabilities.\nThis format is explicitly chosen to be compatible with ",(0,i.kt)("inlineCode",{parentName:"p"},"--vigilant"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In ",(0,i.kt)("inlineCode",{parentName:"p"},"align-deps"),", we've deprecated ",(0,i.kt)("inlineCode",{parentName:"p"},"customProfiles")," in favour of ",(0,i.kt)("inlineCode",{parentName:"p"},"presets"),". A\npreset is just a collection of profiles like in the example above. This new\nproperty allows you to specify multiple presets and/or replace the built-in\n",(0,i.kt)("inlineCode",{parentName:"p"},"react-native")," preset. The command line flag, ",(0,i.kt)("inlineCode",{parentName:"p"},"--custom-profiles"),", was replaced\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},"--presets"),"."),(0,i.kt)("p",{parentName:"admonition"},"You can read more about the changes in this RFC:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rnx-kit/blob/rfcs/text/0001-dep-check-v2.md"},"https://github.com/microsoft/rnx-kit/blob/rfcs/text/0001-dep-check-v2.md"))),(0,i.kt)("h2",{id:"alternatives"},"Alternatives"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"peerDependencies")," \u2014 What's the difference between ",(0,i.kt)("inlineCode",{parentName:"li"},"dep-check")," and just using\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},"peerDependencies")," field in ",(0,i.kt)("inlineCode",{parentName:"li"},"package.json"),"?",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"JS package managers are inconsistent when it comes to installing peer\ndependencies. npm has been\n",(0,i.kt)("a",{parentName:"li",href:"https://blog.npmjs.org/post/110924823920/npm-weekly-5.html"},"back")," and\n",(0,i.kt)("a",{parentName:"li",href:"https://github.blog/2021-02-02-npm-7-is-now-generally-available/#peer-dependencies"},"forth"),"\non this. Yarn only emits warnings when they are unsatisfied. The only sure\nway to get them installed is ensure that the dependencies are added\nappropriately. However, people tend to ignore warnings in our experience."),(0,i.kt)("li",{parentName:"ul"},"There is no central control over what gets added to ",(0,i.kt)("inlineCode",{parentName:"li"},"peerDependencies"),". One\npackage could add ",(0,i.kt)("inlineCode",{parentName:"li"},"react-native-webview"),"@^11.4.2, while another has\n",(0,i.kt)("inlineCode",{parentName:"li"},"react-native-webview"),"@^10.10.2. Or worse, they could be adding them under\n",(0,i.kt)("inlineCode",{parentName:"li"},"dependencies")," instead, potentially causing two copies to be bundled with\nyour app."),(0,i.kt)("li",{parentName:"ul"},"Similarly, package managers don't care whether you're using\n",(0,i.kt)("inlineCode",{parentName:"li"},"@react-native-community/netinfo")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"react-native-netinfo"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/JamieMason/syncpack/"},"syncpack")," \u2014 syncpack is a tool to\nmanage dependencies within a monorepo. It has some overlap with ",(0,i.kt)("inlineCode",{parentName:"li"},"dep-check"),"\nbut doesn't cover everything we need. In particular:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It doesn't have a central repository of dependencies, so it cannot align\nmultiple repositories on the same packages and versions for the same set of\ncapabilities."),(0,i.kt)("li",{parentName:"ul"},"From a cursory glance, it doesn't allow packages to support multiple\nversions of react-native."),(0,i.kt)("li",{parentName:"ul"},"It supports version groups, which may be useful for some usage scenarios,\nbut are potentially dangerous within react-native repos.")))))}m.isMDXComponent=!0}}]);