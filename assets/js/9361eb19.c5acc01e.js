"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[6050],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>k});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(r),d=o,k=u["".concat(s,".").concat(d)]||u[d]||c[d]||a;return r?n.createElement(k,i(i({ref:t},m),{},{components:r})):n.createElement(k,i({ref:t},m))}));function k(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1731:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={},i="metro-resolver-symlinks",l={unversionedId:"tools/metro-resolver-symlinks",id:"tools/metro-resolver-symlinks",title:"metro-resolver-symlinks",description:"@rnx-kit/metro-resolver-symlinks is a Metro resolver with proper support for",source:"@site/docs/tools/metro-resolver-symlinks.md",sourceDirName:"tools",slug:"/tools/metro-resolver-symlinks",permalink:"/rnx-kit/docs/tools/metro-resolver-symlinks",draft:!1,editUrl:"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/tools/metro-resolver-symlinks.md",tags:[],version:"current",frontMatter:{},sidebar:"toolsSidebar",previous:{title:"metro-plugin-typescript",permalink:"/rnx-kit/docs/tools/metro-plugin-typescript"},next:{title:"metro-serializer",permalink:"/rnx-kit/docs/tools/metro-serializer"}},s={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Options",id:"options",level:2},{value:"<code>remapModule</code>",id:"remapmodule",level:3}],m={toc:p},u="wrapper";function c(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"metro-resolver-symlinks"},"metro-resolver-symlinks"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@rnx-kit/metro-resolver-symlinks")," is a Metro resolver with proper support for\nsymlinks. This is especially useful in monorepos, or repos using package\nmanagers that make heavy use of symlinks (such as pnpm)."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add @rnx-kit/metro-resolver-symlinks --dev\n")),(0,o.kt)("p",null,"or if you're using npm"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npm add --save-dev @rnx-kit/metro-resolver-symlinks\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Import and assign the resolver to ",(0,o.kt)("inlineCode",{parentName:"p"},"resolver.resolveRequest")," in your\n",(0,o.kt)("inlineCode",{parentName:"p"},"metro.config.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},' const { makeMetroConfig } = require("@rnx-kit/metro-config");\n+const MetroSymlinksResolver = require("@rnx-kit/metro-resolver-symlinks");\n\n module.exports = makeMetroConfig({\n   resolver: {\n+    resolveRequest: MetroSymlinksResolver(),\n   },\n });\n')),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Option"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"remapModule")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"(moduleId: string) => string")),(0,o.kt)("td",{parentName:"tr",align:"left"},"A custom function for remapping additional modules.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"experimental_retryResolvingFromDisk")),(0,o.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,o.kt)("td",{parentName:"tr",align:"left"},"[Experimental]"," Whether to retry module resolution on disk if not found in Haste map. This option is useful for scenarios where you want to reduce the number of watched files (and thus the initial time spent on crawling). Note that enabling this will likely be slower than having a warm cache.")))),(0,o.kt)("h3",{id:"remapmodule"},(0,o.kt)("inlineCode",{parentName:"h3"},"remapModule")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"remapModule")," allows additional remapping of modules. For instance, there is a\n",(0,o.kt)("inlineCode",{parentName:"p"},"remapImportPath")," utility that remaps requests of ",(0,o.kt)("inlineCode",{parentName:"p"},"lib/**/*.js")," to\n",(0,o.kt)("inlineCode",{parentName:"p"},"src/**/*.ts"),". This is useful for packages that don't correctly export\neverything in their main JS file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},' const { makeMetroConfig } = require("@rnx-kit/metro-config");\n const MetroSymlinksResolver = require("@rnx-kit/metro-resolver-symlinks");\n\n module.exports = makeMetroConfig({\n   projectRoot: __dirname,\n   resolver: {\n     resolveRequest: MetroSymlinksResolver({\n+      remapModule: MetroSymlinksResolver.remapImportPath({\n+        test: (moduleId) => moduleId.startsWith("@rnx-kit/"),\n+        extensions: [".ts", ".tsx"],     // optional\n+        mainFields: ["module", "main"],  // optional\n+      }),\n     }),\n   },\n });\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Sidenote:")," When Metro releases a version with the ability to set a\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/metro/commit/96fb6e904e1660b37f4d1f5353ca1e5477c4afbf"},"custom resolver for Haste requests"),",\nthis way of remapping modules is preferable over\n",(0,o.kt)("inlineCode",{parentName:"p"},"@rnx-kit/babel-plugin-import-path-remapper"),". The Babel plugin mutates the AST\nand requires a second pass.")))}c.isMDXComponent=!0}}]);