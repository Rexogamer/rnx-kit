"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[6814],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9557:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={},i="react-native-lazy-index",l={unversionedId:"tools/react-native-lazy-index",id:"tools/react-native-lazy-index",title:"react-native-lazy-index",description:"",source:"@site/docs/tools/react-native-lazy-index.mdx",sourceDirName:"tools",slug:"/tools/react-native-lazy-index",permalink:"/rnx-kit/docs/tools/react-native-lazy-index",draft:!1,editUrl:"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/tools/react-native-lazy-index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"toolsSidebar",previous:{title:"react-native-host",permalink:"/rnx-kit/docs/tools/react-native-host"},next:{title:"react-native-test-app-msal",permalink:"/rnx-kit/docs/tools/react-native-test-app-msal"}},s={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Why",id:"why",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"First parameter must be a string literal",id:"first-parameter-must-be-a-string-literal",level:3},{value:"My components are still not found",id:"my-components-are-still-not-found",level:3},{value:"I want to manually declare all entry points myself",id:"i-want-to-manually-declare-all-entry-points-myself",level:3},{value:"Contributing",id:"contributing",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"react-native-lazy-index"},"react-native-lazy-index"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"react-native-lazy-index")," is a RAM bundle friendly, bundle-time generated\n",(0,r.kt)("inlineCode",{parentName:"p"},"index.js"),". Improve your app startup time by only loading features you'll use on\ndemand."),(0,r.kt)("p",null,"For information on RAM bundles and inline requires, see\n",(0,r.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/ram-bundles-inline-requires"},"React Native Performance"),"."),(0,r.kt)("p",null,"If you use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/callstack/haul"},"Haul"),", also take a look at their\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/callstack/haul/blob/2c68e97766f9f6c2632c46e40631bd7aaacdc75b/docs/CLI%20Commands.md#haul-ram-bundle"},"documentation"),"."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm install --save @rnx-kit/react-native-lazy-index\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"react-native-lazy-index")," uses\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kentcdodds/babel-plugin-codegen#configure-with-babel"},(0,r.kt)("inlineCode",{parentName:"a"},"babel-plugin-codegen")),",\nso you'll need to configure Babel to include it. The recommended way is to add\nit to your ",(0,r.kt)("inlineCode",{parentName:"p"},".babelrc"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},' {\n   "presets": ["module:metro-react-native-babel-preset"],\n   "plugins": [\n+    "codegen"\n   ]\n }\n')),(0,r.kt)("p",null,"In your ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),", add a section called ",(0,r.kt)("inlineCode",{parentName:"p"},'"experiences"')," with the features\nthat should be lazy loaded. In the example below, we've listed four packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},' {\n   "name": "my-awesome-app",\n   "version": "1.0.0",\n   "main": "index.js",\n   "dependencies": {\n     "@awesome-app/some-feature": "*",\n     "@awesome-app/another-feature": "*",\n     "@awesome-app/yet-another-feature": "*",\n     "@awesome-app/final-feature": "*",\n     "@rnx-kit/react-native-lazy-index": "^2.0.0",\n     "react": "16.13.1",\n     "react-native": "0.63.4"\n   },\n+  "experiences": [\n+    "@awesome-app/some-feature",\n+    "@awesome-app/another-feature",\n+    "@awesome-app/yet-another-feature",\n+    "@awesome-app/final-feature"\n+  ]\n }\n')),(0,r.kt)("p",null,"Finally, replace the content of your ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import "@rnx-kit/react-native-lazy-index";\n')),(0,r.kt)("p",null,"That's it!"),(0,r.kt)("h2",{id:"why"},"Why"),(0,r.kt)("p",null,"With a naive ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js"),", all features will be loaded when your app starts and\nReact Native is initialized for the first time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import "@awesome-app/some-feature";\nimport "@awesome-app/another-feature";\nimport "@awesome-app/yet-another-feature";\nimport "@awesome-app/final-feature";\n')),(0,r.kt)("p",null,"By loading features on demand, we can improve app startup time."),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"react-native-lazy-index"),", we no longer load all features up front.\nInstead, ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js")," wraps calls to ",(0,r.kt)("inlineCode",{parentName:"p"},"AppRegistry.registerComponent")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"BatchedBridge.registerCallableModule"),", deferring the import of a feature until\nit is used. Features that are never used, are never loaded."),(0,r.kt)("p",null,"When you import ",(0,r.kt)("inlineCode",{parentName:"p"},"react-native-lazy-index"),", something similar to below is\ngenerated:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const { AppRegistry } = require("react-native");\nconst BatchedBridge = require("react-native/Libraries/BatchedBridge/BatchedBridge");\n\nAppRegistry.registerComponent("SomeFeature", () => {\n  // We\'ll import the module the first time "SomeFeature" is accessed.\n  require("@awesome-app/some-feature");\n  // "SomeFeature" is now overwritten and we can return the real component.\n  // Subsequent calls to "SomeFeature" will no longer go through this wrapper.\n  return AppRegistry.getRunnable("SomeFeature").componentProvider();\n});\n\nBatchedBridge.registerLazyCallableModule("AnotherFeature", () => {\n  // We\'ll import the module the first time "AnotherFeature" is accessed.\n  require("@awesome-app/another-feature");\n  // "AnotherFeature" is now overwritten and we can return the real component.\n  // Subsequent calls to "AnotherFeature" will no longer go through this\n  // wrapper.\n  return BatchedBridge.getCallableModule("AnotherFeature");\n});\n\nAppRegistry.registerComponent("YetAnotherFeature", () => {\n  // We\'ll import the module the first time "YetAnotherFeature" is accessed.\n  require("@awesome-app/yet-another-feature");\n  // "YetAnotherFeature" is now overwritten and we can return the real\n  // component. Subsequent calls to "YetAnotherFeature" will no longer go\n  // through this wrapper.\n  return AppRegistry.getRunnable("YetAnotherFeature").componentProvider();\n});\n\nAppRegistry.registerComponent("FinalFeature", () => {\n  // We\'ll import the module the first time "FinalFeature" is accessed.\n  require("@awesome-app/final-feature");\n  // "FinalFeature" is now overwritten and we can return the real component.\n  // Subsequent calls to "FinalFeature" will no longer go through this wrapper.\n  return AppRegistry.getRunnable("FinalFeature").componentProvider();\n});\n')),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("p",null,"If you're having trouble with undetected components, there are a couple of\nthings you should look out for."),(0,r.kt)("h3",{id:"first-parameter-must-be-a-string-literal"},"First parameter must be a string literal"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"react-native-lazy-index")," cannot evaluate the name passed to\n",(0,r.kt)("inlineCode",{parentName:"p"},"AppRegistry.registerComponent()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"BatchedBridge.registerCallableModule()"),"\nunless it is a string literal. For instance, if you have something like this in\ncode:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const appName = "MyApp";\n\nAppRegistry.registerComponent(appName, () => {\n  ...\n});\n')),(0,r.kt)("p",null,"You'll need to inline the string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'AppRegistry.registerComponent("MyApp", () => {\n  ...\n});\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"react-native-lazy-index")," outputs warnings when it detects these instances. If\nchanging the code is not feasible, you can also\n",(0,r.kt)("a",{parentName:"p",href:"#i-want-to-manually-declare-all-entry-points-myself"},"manually declare all entry points"),"."),(0,r.kt)("h3",{id:"my-components-are-still-not-found"},"My components are still not found"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"react-native-lazy-index")," avoids scanning dependencies too deeply to reduce its\nimpact on the build time. If your registrations lie too deep within a\ndependency, it may have bailed out before reaching them. There are a couple of\nthings you can do to help ",(0,r.kt)("inlineCode",{parentName:"p"},"react-native-lazy-index")," find your components:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"If you have access to the source code, you can move your registrations\nfurther up, closer to the entry point of your dependency."),(0,r.kt)("li",{parentName:"ol"},"You can increase the max depth by setting the environment variable\n",(0,r.kt)("inlineCode",{parentName:"li"},"RN_LAZY_INDEX_MAX_DEPTH"),". The default is currently set to 3. Note that\nchanging this setting may significantly impact your build time."),(0,r.kt)("li",{parentName:"ol"},"If neither is feasible, you can also\n",(0,r.kt)("a",{parentName:"li",href:"#i-want-to-manually-declare-all-entry-points-myself"},"manually declare all entry points"),".")),(0,r.kt)("h3",{id:"i-want-to-manually-declare-all-entry-points-myself"},"I want to manually declare all entry points myself"),(0,r.kt)("p",null,"You can skip scanning by manually declaring entry points. The below\nconfiguration will generate the same code as the earlier example output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'  "experiences": {\n    "SomeFeature": "@awesome-app/some-feature",\n    "callable:AnotherFeature": "@awesome-app/another-feature",\n    "YetAnotherFeature": "@awesome-app/yet-another-feature",\n    "FinalFeature": "@awesome-app/final-feature"\n  }\n')),(0,r.kt)("p",null,"By default, a call to ",(0,r.kt)("inlineCode",{parentName:"p"},"AppRegistry")," is generated using the key as the app key,\nand the value is the name of the module containing the app. If the key is\nprefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"callable:"),", a call to ",(0,r.kt)("inlineCode",{parentName:"p"},"BatchedBridge")," will be generated."),(0,r.kt)("h2",{id:"contributing"},"Contributing"),(0,r.kt)("p",null,"This project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution. For\ndetails, visit ",(0,r.kt)("a",{parentName:"p",href:"https://cla.opensource.microsoft.com"},"https://cla.opensource.microsoft.com"),"."),(0,r.kt)("p",null,"When you submit a pull request, a CLA bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., status check,\ncomment). Simply follow the instructions provided by the bot. You will only need\nto do this once across all repos using our CLA."),(0,r.kt)("p",null,"This project has adopted the\n",(0,r.kt)("a",{parentName:"p",href:"https://opensource.microsoft.com/codeofconduct/"},"Microsoft Open Source Code of Conduct"),".\nFor more information see the\n",(0,r.kt)("a",{parentName:"p",href:"https://opensource.microsoft.com/codeofconduct/faq/"},"Code of Conduct FAQ")," or\ncontact ",(0,r.kt)("a",{parentName:"p",href:"mailto:opencode@microsoft.com"},"opencode@microsoft.com")," with any\nadditional questions or comments."))}d.isMDXComponent=!0}}]);