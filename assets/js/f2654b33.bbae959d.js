"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[7057],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),c=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return i.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return n?i.createElement(f,o(o({ref:t},l),{},{components:n})):i.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5853:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var i=n(7462),a=(n(7294),n(3905)),r=n(4996);const o={},s="Type Safety",p={unversionedId:"type-safety",id:"type-safety",title:"Type Safety",description:"A Tale of Two Type Systems",source:"@site/docs/type-safety.mdx",sourceDirName:".",slug:"/type-safety",permalink:"/rnx-kit/docs/type-safety",draft:!1,editUrl:"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/type-safety.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Dependencies",permalink:"/rnx-kit/docs/dependencies"},next:{title:"Getting Started",permalink:"/rnx-kit/docs/guides/getting-started"}},c={},l=[{value:"A Tale of Two Type Systems",id:"a-tale-of-two-type-systems",level:2},{value:"Platform-Specific Code",id:"platform-specific-code",level:2},{value:"Module Substitution",id:"module-substitution",level:2},{value:"Type-Safe Bundling",id:"type-safe-bundling",level:2}],u={toc:l},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"type-safety"},"Type Safety"),(0,a.kt)("h2",{id:"a-tale-of-two-type-systems"},"A Tale of Two Type Systems"),(0,a.kt)("p",null,"React Native is built on JavaScript, which does not have a type system. This is\na problem, because React Native is a large, complex platform. Without a type\nsystem, developers can't easily reason about the source code or use static\nanalysis tools to find bugs."),(0,a.kt)("p",null,"When developers at Meta created React Native, they chose their own type system\nnamed Flow. Many open-source projects at Meta use Flow. It is part of their\nengineering system and culture. Flow is not used much outside of Meta."),(0,a.kt)("p",null,"The JavaScript community has largely embraced TypeScript. This includes the\nReact Native developer community as well. React Native applications are written\nin TypeScript. Integrations with React Native -- plugins, presets, templates,\netc -- are also written in TypeScript."),(0,a.kt)("p",null,"The tools in this project are written in TypeScript, too. Further, tools in this\nproject which perform type-checking do so using the TypeScript language."),(0,a.kt)("h2",{id:"platform-specific-code"},"Platform-Specific Code"),(0,a.kt)("p",null,"React Native introduces the concept of\n",(0,a.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/platform-specific-code#platform-specific-extensions"},"platform-specific extensions"),"\nso that developers can write per-platform code in their applications.\nPlatform-specific extensions require a specialized module resolver, capable of\nmatching a module import to a file such as ",(0,a.kt)("inlineCode",{parentName:"p"},"<module>.ios.js")," or\n",(0,a.kt)("inlineCode",{parentName:"p"},"<module>.native.js"),". Metro, the React Native bundler, has a resolver which\nsupports this."),(0,a.kt)("p",null,"TypeScript version 4.7 also supports style of module resolution via the compiler\noption ",(0,a.kt)("inlineCode",{parentName:"p"},"moduleSuffixes"),". See the\n",(0,a.kt)("a",{parentName:"p",href:"https://devblogs.microsoft.com/typescript/announcing-typescript-4-7-beta/#resolution-customization-with-modulesuffixes"},"announcement"),"\nfor details."),(0,a.kt)("h2",{id:"module-substitution"},"Module Substitution"),(0,a.kt)("p",null,"React Native is implemented on many platforms which span several NPM packages.\n",(0,a.kt)("inlineCode",{parentName:"p"},"ios")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"android")," implementations are in the ",(0,a.kt)("inlineCode",{parentName:"p"},"react-native")," NPM package, which\nis maintained by Meta. ",(0,a.kt)("inlineCode",{parentName:"p"},"windows")," is under ",(0,a.kt)("inlineCode",{parentName:"p"},"react-native-windows")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"macos")," is\nunder ",(0,a.kt)("inlineCode",{parentName:"p"},"react-native-macos"),", both of which are maintained by Microsoft. ",(0,a.kt)("inlineCode",{parentName:"p"},"win32"),"\nis an Office-specific platform under ",(0,a.kt)("inlineCode",{parentName:"p"},"@office-iss/react-native-win32"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"windows"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"macos"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"win32")," are all considered to be\n",(0,a.kt)("a",{parentName:"p",href:"https://microsoft.github.io/react-native-windows/docs/metro-config-out-tree-platforms"},"out-of-tree platforms"),"\nbecause they aren't part of the core ",(0,a.kt)("inlineCode",{parentName:"p"},"react-native")," distribution. Each platform\npackage is a complete implementation of React Native, and has (or should have)\nassociated TypeScript types."),(0,a.kt)("p",null,'To avoid having "forked" references to the various NPM package names in code,\ndevelopers are encouraged to always use ',(0,a.kt)("inlineCode",{parentName:"p"},"import 'react-native'"),". Metro, the\nReact Native bundler, substitutes 'react-native' with the target platform's\nout-of-tree NPM package. For macOS, ",(0,a.kt)("inlineCode",{parentName:"p"},"import 'react-native'")," becomes\n",(0,a.kt)("inlineCode",{parentName:"p"},"import 'react-native-macos'"),"."),(0,a.kt)("p",null,'We are working with the TypeScript team to support a similar "module substitution"\nmechanism for type-checking and IntelliSense.'),(0,a.kt)("p",null,"TypeScript support is most beneficial when integrated with an editor like\nVSCode. Seeing platform-specific type-safety errors, during development, helps\nkeep bugs out of the shared source tree."),(0,a.kt)("p",null,"This feature\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rnx-kit/issues/1273"},"continues to be a work in progress"),"."),(0,a.kt)("h2",{id:"type-safe-bundling"},"Type-Safe Bundling"),(0,a.kt)("p",null,"Metro, the React Native bundler, supports TypeScript source files, but it only\ntranspiles them to JavaScript. Metro does not do any type-checking."),(0,a.kt)("p",null,"Our CLI combines Metro and TypeScript to solve this problem. Through\nconfiguration, you can enable type-checking while running the ",(0,a.kt)("inlineCode",{parentName:"p"},"rnx-bundle")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"rnx-start")," commands. Warnings and errors from TypeScript appear on the console:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Unused function with missing type information"',title:'"Unused',function:!0,with:!0,missing:!0,type:!0,'information"':!0},"function foo(x) {\n  return x + 2;\n}\n")),(0,a.kt)("img",{src:(0,r.Z)("/img/type-safe-bundling-output.png"),alt:"Image showing TypeScript errors. Foo is declared but never used. Parameter x implicitly has an 'any' type.",width:"700"}),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/bundling"},"Bundling guide")," shows you how to enable type-safe\nbundling."))}m.isMDXComponent=!0}}]);