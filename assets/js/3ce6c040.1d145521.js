"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[1136],{5162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(7294),r=t(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>w});var a=t(7462),r=t(7294),o=t(6010),i=t(2466),l=t(6550),s=t(1980),p=t(7392),u=t(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function c(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,p.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=c(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[s,p]=g({queryString:t,groupId:a}),[d,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,u.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),k=(()=>{const e=s??d;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{k&&l(k)}),[k]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),h(e)}),[p,h,o]),tabValues:o}}var k=t(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:n,block:t,selectedValue:l,selectValue:s,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),c=e=>{const n=e.currentTarget,t=u.indexOf(n),a=p[t].value;a!==l&&(d(n),s(a))},m=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},p.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>u.push(e),onKeyDown:m,onClick:c},i,{className:(0,o.Z)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":l===n})}),t??n)})))}function b(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function v(e){const n=h(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",y.tabList)},r.createElement(f,(0,a.Z)({},e,n)),r.createElement(b,(0,a.Z)({},e,n)))}function w(e){const n=(0,k.Z)();return r.createElement(v,(0,a.Z)({key:String(n)},e))}},1659:(e,n,t)=>{t.d(n,{ZP:()=>l});var a=t(7462),r=(t(7294),t(3905));const o={toc:[]},i="wrapper";function l(e){let{components:n,...t}=e;return(0,r.kt)(i,(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Was this helpful? Spread the word on ",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com"},"Twitter"),":\n",(0,r.kt)("inlineCode",{parentName:"p"},"@ReactNativeMSFT")," ",(0,r.kt)("inlineCode",{parentName:"p"},"#rnxkit")))}l.isMDXComponent=!0},3478:(e,n,t)=>{t.d(n,{ZP:()=>u});var a=t(7462),r=(t(7294),t(3905)),o=t(4866),i=t(5162),l=t(814);const s={toc:[]},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(o.Z,{groupId:"package-manager",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"yarn",label:"Yarn",default:!0,mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"sh",mdxType:"CodeBlock"},"yarn ",t.yarnArgs||t.args)),(0,r.kt)(i.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"sh",mdxType:"CodeBlock"},"pnpm ",t.pnpmArgs||t.args)),(0,r.kt)(i.Z,{value:"npm",label:"npm",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"sh",mdxType:"CodeBlock"},"npm ",t.npmArgs||t.args))))}u.isMDXComponent=!0},3238:(e,n,t)=>{t.d(n,{ZP:()=>u});var a=t(7462),r=(t(7294),t(3905)),o=t(4866),i=t(5162),l=t(814);const s={toc:[]},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(o.Z,{groupId:"package-manager",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"yarn",label:"Yarn",default:!0,mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"sh",mdxType:"CodeBlock"},"yarn ",t.yarnArgs||t.args)),(0,r.kt)(i.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"sh",mdxType:"CodeBlock"},"pnpm ",t.pnpmArgs||t.args)),(0,r.kt)(i.Z,{value:"npm",label:"npm",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"sh",mdxType:"CodeBlock"},"npx ",t.npxArgs||t.args))))}u.isMDXComponent=!0},8333:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>k,frontMatter:()=>p,metadata:()=>d,toc:()=>m});var a=t(7462),r=(t(7294),t(3905)),o=t(4996),i=t(3478),l=t(3238),s=t(1659);const p={},u="Bundling",d={unversionedId:"guides/bundling",id:"guides/bundling",title:"Bundling",description:"When you're done here, you'll be able to bundle and ship your apps with Metro,",source:"@site/docs/guides/bundling.mdx",sourceDirName:"guides",slug:"/guides/bundling",permalink:"/rnx-kit/docs/guides/bundling",draft:!1,editUrl:"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/guides/bundling.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Dependency Management",permalink:"/rnx-kit/docs/guides/dependency-management"}},c={},m=[{value:"Setting up the Tools",id:"setting-up-the-tools",level:2},{value:"Creating Bundler Commands",id:"creating-bundler-commands",level:2},{value:"Using App Configuration",id:"using-app-configuration",level:2},{value:"Beyond the Command-Line",id:"beyond-the-command-line",level:2},{value:"Type Safety with TypeScript",id:"type-safety-with-typescript",level:3},{value:"Tree Shaking",id:"tree-shaking",level:3},{value:"Duplicate Dependencies",id:"duplicate-dependencies",level:3},{value:"Cyclic Dependencies",id:"cyclic-dependencies",level:3},{value:"Running the Bundler",id:"running-the-bundler",level:2},{value:"Integrating with PRs and Builds",id:"integrating-with-prs-and-builds",level:2},{value:"Wrapping Up",id:"wrapping-up",level:2}],g={toc:m},h="wrapper";function k(e){let{components:n,...t}=e;return(0,r.kt)(h,(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bundling"},"Bundling"),(0,r.kt)("p",null,"When you're done here, you'll be able to bundle and ship your apps with Metro,\nthe React Native bundler. The tools you'll use in this guide ",(0,r.kt)("em",{parentName:"p"},"enhance")," Metro,\nmaking it easier to use, type-safe, and fast."),(0,r.kt)("p",null,"This guide is meant to be used with one React Native app at a time, though you\ncan repeat it for all of your apps."),(0,r.kt)("h2",{id:"setting-up-the-tools"},"Setting up the Tools"),(0,r.kt)("p",null,"Install the tools you'll need for bundling."),(0,r.kt)(i.ZP,{yarnArgs:"add @rnx-kit/cli @rnx-kit/babel-preset-metro-react-native @rnx-kit/metro-config @rnx-kit/metro-resolver-symlinks --dev",pnpmArgs:"add -D @rnx-kit/cli @rnx-kit/babel-preset-metro-react-native @rnx-kit/metro-config @rnx-kit/metro-resolver-symlinks",npmArgs:"add --save-dev @rnx-kit/cli @rnx-kit/babel-preset-metro-react-native @rnx-kit/metro-config @rnx-kit/metro-resolver-symlinks",mdxType:"PackageCommand"}),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"@rnx-kit/babel-preset-metro-react-native")," as a preset in your Babel\nconfiguration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="babel.config.js"',title:'"babel.config.js"'},'module.exports = {\n  presets: ["@rnx-kit/babel-preset-metro-react-native"],\n};\n')),(0,r.kt)("p",null,"Configure Metro using ",(0,r.kt)("inlineCode",{parentName:"p"},"@rnx-kit/metro-config"),". Add support for symlinks, too,\nsince all major package managers make use of them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="metro.config.js"',title:'"metro.config.js"'},'const { makeMetroConfig } = require("@rnx-kit/metro-config");\nconst MetroSymlinksResolver = require("@rnx-kit/metro-resolver-symlinks");\n\nmodule.exports = makeMetroConfig({\n  resolver: {\n    resolveRequest: MetroSymlinksResolver(),\n  },\n  // Add your existing Metro configuration here! It will be merged in.\n});\n')),(0,r.kt)("p",null,"If your app was already using Metro, it may have mappings in its config which\ncompensate for Metro's lack of symlink support. They probably look something\nlike this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const fooLocal = path.resolve(__dirname, "node_modules", "foo");\nconst barHoisted = path.resolve(__dirname, "..", "..", "node_modules", "foo");\n{\n  resolver: {\n    extraNodeModules: {\n      "foo": fooLocal,\n      "bar": barHoisted\n    },\n  },\n  watchFolders: [fooLocal, barHoisted],\n}\n')),(0,r.kt)("p",null,"Good news! You can get rid of all these mappings now! \ud83c\udf89"),(0,r.kt)("h2",{id:"creating-bundler-commands"},"Creating Bundler Commands"),(0,r.kt)("p",null,"The bundler is integrated with the React Native CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"react-native rnx-bundle ...\nreact-native rnx-start ...\n")),(0,r.kt)("p",null,"It's time to put together an ",(0,r.kt)("inlineCode",{parentName:"p"},"rnx-bundle")," command for your app. Start with\n",(0,r.kt)("inlineCode",{parentName:"p"},"react-native rnx-bundle"),", and add the parameters listed in this table:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Explanation"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--entry-file"),(0,r.kt)("td",{parentName:"tr",align:null},"The source file at the root of your app. It usually has a call to ",(0,r.kt)("inlineCode",{parentName:"td"},"AppRegistry.registerComponent"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--platform"),(0,r.kt)("td",{parentName:"tr",align:null},"Pick your target platform: ios, android, macos, or windows.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--bundle-output"),(0,r.kt)("td",{parentName:"tr",align:null},"Choose a file name and path for the bundle file.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--sourcemap-output"),(0,r.kt)("td",{parentName:"tr",align:null},"Choose a file name and path for the source map. Usually named ",(0,r.kt)("inlineCode",{parentName:"td"},"<bundle-file>.map"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--assets-dest"),(0,r.kt)("td",{parentName:"tr",align:null},"Choose a directory for storing assets like strings, images, audio, and video.")))),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"--dev false")," if you want to make an optimized, production bundle."),(0,r.kt)("p",null,"Put it all together into a single command. Here's an example which creates an\niOS developer bundle:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"react-native rnx-bundle \\\n  --entry-file index.js \\\n  --platform ios \\\n  --bundle-output ios/main.jsbundle \\\n  --sourcemap-output ios/main.jsbundle.map \\\n  --assets-dest ios\n")),(0,r.kt)("p",null,"If you're curious about the rest of the command-line parameters, you can find\nthe complete list in the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/tools/cli#command-line-overrides"},"CLI bundle documentation"),"."),(0,r.kt)("p",null,"Now is a good time to try out your ",(0,r.kt)("inlineCode",{parentName:"p"},"rnx-bundle")," command."),(0,r.kt)("p",null,"Are you seeing TypeScript warnings or errors, or messages about duplicate or\ncyclic dependencies? ",(0,r.kt)("strong",{parentName:"p"},"That's ok!")," The tools in this guide ",(0,r.kt)("em",{parentName:"p"},"enhance")," Metro to\nadd type safety and protection from dependency problems. They're helping you\nroot out potential bugs in your app. Ignore them for now. A bit later, you'll\nlearn what they mean, why they're important, and how you can fix them."),(0,r.kt)("p",null,"The next step is putting together an ",(0,r.kt)("inlineCode",{parentName:"p"},"rnx-start")," command for your app.\nParameters aren't typically needed for this command. You should take a look at\nthe ",(0,r.kt)("a",{parentName:"p",href:"/docs/tools/cli#command-line-overrides-1"},"CLI server documentation")," to see\nthe full list of command-line parameters, and decide if you need any of them."),(0,r.kt)("p",null,"Here's an example command which starts a Metro bundle server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"react-native rnx-start\n")),(0,r.kt)("p",null,"Try out your ",(0,r.kt)("inlineCode",{parentName:"p"},"rnx-start")," server command!"),(0,r.kt)("p",null,"You might see warnings or errors, as you did when you ran the ",(0,r.kt)("inlineCode",{parentName:"p"},"rnx-bundle"),"\ncommand. Ignore them for now. You'll work through them a bit later."),(0,r.kt)("p",null,"Assign both ",(0,r.kt)("inlineCode",{parentName:"p"},"rnx-bundle")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"rnx-start"),' commands to scripts in your app. A good\npractice is to have one bundle script per platform, an "umbrella" bundle script\nwhich runs them all, and one server command.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "scripts": {\n    "bundle": "yarn bundle:ios && yarn bundle:android",\n    "bundle:ios": "react-native rnx-bundle --platform ios ...",\n    "bundle:android": "react-native rnx-bundle --platform android ...",\n    "start": "react-native rnx-start"\n  }\n}\n')),(0,r.kt)("h2",{id:"using-app-configuration"},"Using App Configuration"),(0,r.kt)("p",null,"Now you're getting to the good stuff! \ud83c\udf70"),(0,r.kt)("p",null,"Your app knows how to bundle itself. It knows which platforms it supports. It\nknows what to name the bundle file, and where to store assets, so that the\nnative host app can find them at runtime. And it knows how these things vary\nacross each platform."),(0,r.kt)("p",null,"All of this knowledge is encoded in the command-lines you've written for your\napp."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/tools/config"},"App configuration")," is a declarative, structured way to\nexpress these decisions as ",(0,r.kt)("em",{parentName:"p"},"defaults")," for how your app is bundled. All the\nknowledge is captured in one easy-to-read format, without duplication."),(0,r.kt)("p",null,"Take a look at this example iOS bundling command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"react-native rnx-bundle \\\n  --entry-file index.js \\\n  --platform ios \\\n  --bundle-output ios/main.jsbundle \\\n  --sourcemap-output ios/main.jsbundle.map \\\n  --assets-dest ios\n")),(0,r.kt)("p",null,"Here's what it looks like as app defaults in configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=package.json",title:"package.json"},'{\n  "rnx-kit": {\n    "bundle": {\n      "entryFile": "index.js",\n      "targets": ["ios"],\n      "platforms": {\n        "ios": {\n          "bundleOutput": "ios/main.jsbundle",\n          "sourcemapOutput": "ios/main.jsbundle.map",\n          "assetsDest": "ios"\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"And here's what the command reduces to, once the defaults are in place:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"react-native rnx-bundle\n")),(0,r.kt)("p",null,"You can override default using command-line parameters, either in your terminal\nor in package scripts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"react-native rnx-bundle --entry-file test.js\n")),(0,r.kt)("p",null,"Now it's time to convert your ",(0,r.kt)("inlineCode",{parentName:"p"},"rnx-bundle")," commands into app defaults. Use the\nexample above as a guide. Refer to the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/tools/config#bundleconfig-inherits-bundleparameters"},"BundleConfig schema"),"\nfor a complete list of configuration properties."),(0,r.kt)("p",null,"Do the same thing for your ",(0,r.kt)("inlineCode",{parentName:"p"},"rnx-start")," command, but only if you added\ncommand-line parameters. Use the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/tools/config#serverconfig-inherits-bundlerplugins"},"ServerConfig schema"),"\nas a reference. If you don't needing any ",(0,r.kt)("inlineCode",{parentName:"p"},"ServerConfig"),", the server will use\nbundler defaults so you end up serving the same way you bundle."),(0,r.kt)("h2",{id:"beyond-the-command-line"},"Beyond the Command-Line"),(0,r.kt)("p",null,"Remember that bit at the start of this guide about ",(0,r.kt)("em",{parentName:"p"},"enhancing")," Metro? You've\narrived. \ud83d\ude97"),(0,r.kt)("p",null,"This section of the guide will introduce you to a number of features and explain\nwhy they are important. Most of them are on by default. You can explicitly\ncontrol each one through app configuration."),(0,r.kt)("h3",{id:"type-safety-with-typescript"},"Type Safety with TypeScript"),(0,r.kt)("p",null,"TypeScript validation with Metro. \ud83d\ude0e"),(0,r.kt)("p",null,"When you bundle or serve your app, TypeScript will validate your code and tell\nyou about any type safety issues. You'll see the familiar, colorful TS messages\nyou're used to, right in the Metro output:"),(0,r.kt)("img",{src:(0,o.Z)("/img/type-safe-bundling-output.png"),alt:"Image showing TypeScript errors. Foo is declared but never used. Parameter x implicitly has an 'any' type.",width:"700"}),(0,r.kt)("p",null,"TypeScript validation is ",(0,r.kt)("strong",{parentName:"p"},"on")," by default. You can configure it by passing\noptions with the ",(0,r.kt)("inlineCode",{parentName:"p"},"@rnx-kit/metro-plugin-typescript")," entry in\n",(0,r.kt)("a",{parentName:"p",href:"/docs/tools/config#bundlerplugins"},"plugins")," configuration property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=package.json",title:"package.json"},' {\n   "rnx-kit": {\n     "bundle": {\n       "plugins": [\n         "@rnx-kit/metro-plugin-cyclic-dependencies-detector",\n         "@rnx-kit/metro-plugin-duplicates-checker",\n+        ["@rnx-kit/metro-plugin-typescript", { "throwOnError": true }]\n       ]\n     }\n   }\n }\n')),(0,r.kt)("h3",{id:"tree-shaking"},"Tree Shaking"),(0,r.kt)("p",null,"Tree shaking makes your app bundle smaller by eliminating unused code.\nSometimes, a LOT smaller. \ud83d\udcc9"),(0,r.kt)("p",null,"Tree shaking is ",(0,r.kt)("em",{parentName:"p"},"off")," by default. You can control it with the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/tools/config#bundlerplugins"},"treeShake")," configuration property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=package.json",title:"package.json"},'{\n  "rnx-kit": {\n    "bundle": {\n      "treeShake": true\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"duplicate-dependencies"},"Duplicate Dependencies"),(0,r.kt)("p",null,"Did you know that your app bundle can have multiple copies of a single package\nin it? Yes, this is a thing that happens. Sometimes, the duplicates are even the\nsame version of the package! \ud83d\udce6 \ud83d\udce6 \ud83d\udce6"),(0,r.kt)("p",null,"Clearly, this is bad because the bundle is larger than it needs to be. More\nimportantly, though, duplicates ",(0,r.kt)("em",{parentName:"p"},"can lead to runtime problems"),", especially when\nthe duplicated package has global state."),(0,r.kt)("img",{src:(0,o.Z)("/img/duplicate-depdendency-error.jpg"),alt:"Image showing a duplicate dependency error. The package named react-is has been included in the bundle twice. Once as version 16.13.1, and once as version 17.0.2.",width:"700"}),(0,r.kt)("p",null,"Duplicate detection is ",(0,r.kt)("strong",{parentName:"p"},"on")," by default. You can configure it by passing\noptions with the ",(0,r.kt)("inlineCode",{parentName:"p"},"@rnx-kit/metro-plugin-duplicates-checker")," entry in\n",(0,r.kt)("a",{parentName:"p",href:"/docs/tools/config#bundlerplugins"},"plugins")," configuration property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=package.json",title:"package.json"},' {\n   "rnx-kit": {\n     "bundle": {\n       "plugins": [\n         "@rnx-kit/metro-plugin-cyclic-dependencies-detector",\n+        ["@rnx-kit/metro-plugin-duplicates-checker", { "throwOnError": true }],\n         "@rnx-kit/metro-plugin-typescript"\n       ]\n     }\n   }\n }\n')),(0,r.kt)("h3",{id:"cyclic-dependencies"},"Cyclic Dependencies"),(0,r.kt)("p",null,"If your dependency graph has a cycle (loop), then you are ",(0,r.kt)("em",{parentName:"p"},"at risk for app\nhangs"),". \ud83d\udd04"),(0,r.kt)("p",null,"A cycle in your dependency graph will look somthing like this: ",(0,r.kt)("inlineCode",{parentName:"p"},"logger")," requires\n",(0,r.kt)("inlineCode",{parentName:"p"},"file-appender")," which requires ",(0,r.kt)("inlineCode",{parentName:"p"},"fs-utils")," which then requires ",(0,r.kt)("inlineCode",{parentName:"p"},"logger"),"."),(0,r.kt)("img",{src:(0,o.Z)("/img/cyclic-dependency-error.jpg"),alt:"Image showing a cyclic dependency error. Test-app requires the logger package, which requires file-appender, which requires fs-utils, which requires logger again.",width:"650"}),(0,r.kt)("p",null,"Cycles can be bad news. Detecting them is ",(0,r.kt)("strong",{parentName:"p"},"on")," by default. You can configure\nit by passing options with the\n",(0,r.kt)("inlineCode",{parentName:"p"},"@rnx-kit/metro-plugin-cyclic-dependencies-detector")," entry in\n",(0,r.kt)("a",{parentName:"p",href:"/docs/tools/config#bundlerplugins"},"plugins")," configuration property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=package.json",title:"package.json"},' {\n   "rnx-kit": {\n     "bundle": {\n       "plugins": [\n+        [\n+          "@rnx-kit/metro-plugin-cyclic-dependencies-detector",\n+          { "throwOnError": true }\n+        ],\n         "@rnx-kit/metro-plugin-duplicates-checker",\n         "@rnx-kit/metro-plugin-typescript"\n       ]\n     }\n   }\n }\n')),(0,r.kt)("h2",{id:"running-the-bundler"},"Running the Bundler"),(0,r.kt)("p",null,"It's now time to get bundling and serving working for your app. This part of the\nguide will help you work through issues related to type safety, duplicate\ndependencies, and cyclic dependencies."),(0,r.kt)("p",null,"Run the bundler:"),(0,r.kt)(l.ZP,{args:"bundle",mdxType:"PackageRunCommand"}),(0,r.kt)("p",null,"Start the bundle server, and request a bundle from it using your native host\napp:"),(0,r.kt)(l.ZP,{args:"start",mdxType:"PackageRunCommand"}),(0,r.kt)("p",null,"Did both commands succeed? If so, great! Skip to the\n",(0,r.kt)("a",{parentName:"p",href:"#integrating-with-prs-and-builds"},"next section"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Are you seeing TypeScript errors?")),(0,r.kt)("p",null,"Type safety matters. It lets you reason about your app without running it to\nfind flaws, see patterns, and do automated transformations."),(0,r.kt)("p",null,"You should fix these now, or plan on fixing them soon. To defer until later,\nconfigure the bundler so it reports the errors without failing. Set\n",(0,r.kt)("inlineCode",{parentName:"p"},"throwOnError")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=package.json",title:"package.json"},' {\n   "rnx-kit": {\n     "bundle": {\n       "plugins": [\n         "@rnx-kit/metro-plugin-cyclic-dependencies-detector",\n         "@rnx-kit/metro-plugin-duplicates-checker",\n+        ["@rnx-kit/metro-plugin-typescript", { "throwOnError": false }]\n       ]\n     }\n   }\n }\n')),(0,r.kt)("p",null,"It's also a good idea to open a new issue for tracking the type errors, and to\nremind you to re-enable ",(0,r.kt)("inlineCode",{parentName:"p"},"throwOnError"),". In the meantime, keeping the errors\nvisible in the Metro output helps everyone be aware of danger-areas in the app."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Are you running into duplicate package errors?")),(0,r.kt)("p",null,"You may be wondering how this even happens. Metro sees each copy of a duplicate\npackage as unique because it has a unique filesystem path. How does ",(0,r.kt)("em",{parentName:"p"},"that"),"\nhappen? pnpm isolation does this by design when versions differ or\npeerDependencies vary in parent packages. yarn hoisting also does this by\ndesign, allowing for a hoisted version and different local versions."),(0,r.kt)("p",null,'So what can you do? The goal is to "collapse" the duplicate packages down to a\nsingle version. That means getting yarn/pnpm to look at all the places a\nduplicate package is named, and decide that one single version can be used to\nsatisfy all constraints. That will lead to only one copy showing up on the\nfilesystem.'),(0,r.kt)("p",null,"Below are some helpful tricks you can try:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"(Easy) Make sure your packages all depend on the same version of the duplicate\npackage."),(0,r.kt)("li",{parentName:"ul"},"(Easy) If you are using yarn, run the ",(0,r.kt)("inlineCode",{parentName:"li"},"yarn-deduplicate")," package to collapse\naway duplicate entries in your yarn.lock file. These aren't cleaned up\nautomatically as yarn runs."),(0,r.kt)("li",{parentName:"ul"},"(Hard) In your lock file, find the set of external packages that are pulling\nin the duplicate package. See if you can upgrade or downgrade them so they all\nbring in the same version of the duplicate package. This may not be possible."),(0,r.kt)("li",{parentName:"ul"},"(Hard) If you are using pnpm, trace the duplicates through the maze of parent\ndependencies. If any of them have common peerDependencies, like ",(0,r.kt)("inlineCode",{parentName:"li"},"react")," or\n",(0,r.kt)("inlineCode",{parentName:"li"},"react-native"),', make sure the semver constraints match. "^17.0.0" and\n"^17.0.2" will cause pnpm to fork the dependency tree to isolate (encapsulate)\nthis difference.'),(0,r.kt)("li",{parentName:"ul"},"(Easy but ",(0,r.kt)("strong",{parentName:"li"},"Dangerous"),"). Force yarn/pnpm to use a specific version of the\nduplicate package whenever they see it, regardless of what is in package.json.\nyarn has a ",(0,r.kt)("inlineCode",{parentName:"li"},"resolutions")," property which does this. pnpm has a ",(0,r.kt)("inlineCode",{parentName:"li"},"readPackage"),"\nhook which you can use to do this. Both are dangerous because ",(0,r.kt)("strong",{parentName:"li"},"you can break\nthe packages that depend on the package version you are changing"),".")),(0,r.kt)("p",null,"If you can't get rid of the duplicate package, and your app seems to be working,\nyou can choose to live with it. Add the duplicate package name to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"ignoredModules")," option, e.g. to ignore duplicates of ",(0,r.kt)("inlineCode",{parentName:"p"},"react-is"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=package.json",title:"package.json"},' {\n   "rnx-kit": {\n     "bundle": {\n       "plugins": [\n         "@rnx-kit/metro-plugin-cyclic-dependencies-detector",\n+        [\n+          "@rnx-kit/metro-plugin-duplicates-checker",\n+          { "ignoredModules": ["react-is"] }\n+        ],\n         "@rnx-kit/metro-plugin-typescript"\n       ]\n     }\n   }\n }\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Are you seeing cyclic dependency errors?")),(0,r.kt)("p",null,"A cycle in your dependency graph will look somthing like this: ",(0,r.kt)("inlineCode",{parentName:"p"},"logger")," requires\n",(0,r.kt)("inlineCode",{parentName:"p"},"file-appender")," which requires ",(0,r.kt)("inlineCode",{parentName:"p"},"fs-utils")," which then requires ",(0,r.kt)("inlineCode",{parentName:"p"},"logger"),". The\n",(0,r.kt)("inlineCode",{parentName:"p"},"logger")," package depends on itself."),(0,r.kt)("p",null,"Cycles are bad because they can lead to an infinite loop at runtime."),(0,r.kt)("p",null,"Here are some approaches you can use to fix a cycle:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If any of the packages live in your repo, refactor them to break the cycle."),(0,r.kt)("li",{parentName:"ul"},"If they're all external packages, you can submit a PR, though it may take time\nto be accepted and published. If you're impatient, you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"patch-package"),"\nwhile you wait for the PR to land."),(0,r.kt)("li",{parentName:"ul"},"Try looking for a different package, or group of packages, that does roughly\nwhat you want.")),(0,r.kt)("p",null,"If none of this is appealing, you can take a closer look at the code involved to\nunderstand if and how an infinite loop might occur. If you can avoid triggering\nit, then document that in your code, and live with the cycle. Set ",(0,r.kt)("inlineCode",{parentName:"p"},"throwOnError"),"\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=package.json",title:"package.json"},' {\n   "rnx-kit": {\n     "bundle": {\n       "plugins": [\n+        [\n+          "@rnx-kit/metro-plugin-cyclic-dependencies-detector",\n+          { "throwOnError": false }\n+        ],\n         "@rnx-kit/metro-plugin-duplicates-checker",\n         "@rnx-kit/metro-plugin-typescript"\n       ]\n     }\n   }\n }\n')),(0,r.kt)("h2",{id:"integrating-with-prs-and-builds"},"Integrating with PRs and Builds"),(0,r.kt)("p",null,"You've done the hard part, and you're close to the finish line! The last step is\nto add automation which guards your app against bundling errors in future PRs.\n\ud83d\udee1\ufe0f"),(0,r.kt)("p",null,"If you use Lerna, you can run one command from the root of your repo to bundle\nall packages:"),(0,r.kt)(l.ZP,{args:"lerna run bundle",mdxType:"PackageRunCommand"}),(0,r.kt)("p",null,"If you're using a task runner like Nx, Lage or Gulp, you can go for a more\nsophisticated integration. The advantage being that ",(0,r.kt)("inlineCode",{parentName:"p"},"bundle")," runs as its own\ntask with isolated logging and error handling. And, you can run it in parallel\nwith other tasks."),(0,r.kt)("p",null,"You should now have a command you can run from the root of the repo which\nbundles every app package. Add it to the root package.json file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "scripts": {\n    "bundle": "lerna run bundle"\n  }\n}\n')),(0,r.kt)("p",null,"And then call that top-level command from your PR and Build CI loop definitions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="GitHub Actions Example"',title:'"GitHub',Actions:!0,'Example"':!0},"jobs:\n  build:\n    steps:\n      - name: Bundle all packages\n        run: yarn bundle\n")),(0,r.kt)("p",null,"Easy, right? Now your PRs and Builds will protect the source tree from code that\nbreaks bundling!"),(0,r.kt)("h2",{id:"wrapping-up"},"Wrapping Up"),(0,r.kt)("p",null,"You've done it! You are bundling and serving your React Native apps with Metro,\nusing ",(0,r.kt)("em",{parentName:"p"},"enhancements")," to make the process fast and safe! And your customers will\nthank you when there are fewer errors (type safety) and smaller bundles (tree\nshaking)!"),(0,r.kt)(s.ZP,{mdxType:"AmplifyCallout"}),(0,r.kt)("p",null,"See room for improvement? Please make your voice heard! \ud83d\udcac\n",(0,r.kt)("a",{parentName:"p",href:"/docs/contributing"},"Contribute")," your ideas in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rnx-kit/issues/new?title=Bundling%20Feature%20Request&body=%3c%21--%20Describe%20the%20feature%20your%20need%20here.%20--%3e%0a%0a"},"a new issue"),",\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rnx-kit/discussions/new"},"a discussion topic"),", or\nthrough ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rnx-kit/pulls"},"a pull request"),"."))}k.isMDXComponent=!0}}]);